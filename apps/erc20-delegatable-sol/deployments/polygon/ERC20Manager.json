{
  "address": "0x6C81b826B3975182C959036B27584f63f6B8B08a",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "enforcer",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "terms",
              "type": "bytes"
            }
          ],
          "internalType": "struct Caveat[]",
          "name": "_input",
          "type": "tuple[]"
        }
      ],
      "name": "GET_CAVEAT_ARRAY_PACKETHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "enforcer",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "terms",
              "type": "bytes"
            }
          ],
          "internalType": "struct Caveat",
          "name": "_input",
          "type": "tuple"
        }
      ],
      "name": "GET_CAVEAT_PACKETHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "delegate",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "authority",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "enforcer",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "terms",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Caveat[]",
              "name": "caveats",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Delegation",
          "name": "_input",
          "type": "tuple"
        }
      ],
      "name": "GET_DELEGATION_PACKETHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "gasLimit",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct Transaction",
                  "name": "transaction",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "address",
                          "name": "delegate",
                          "type": "address"
                        },
                        {
                          "internalType": "bytes32",
                          "name": "authority",
                          "type": "bytes32"
                        },
                        {
                          "components": [
                            {
                              "internalType": "address",
                              "name": "enforcer",
                              "type": "address"
                            },
                            {
                              "internalType": "bytes",
                              "name": "terms",
                              "type": "bytes"
                            }
                          ],
                          "internalType": "struct Caveat[]",
                          "name": "caveats",
                          "type": "tuple[]"
                        }
                      ],
                      "internalType": "struct Delegation",
                      "name": "delegation",
                      "type": "tuple"
                    },
                    {
                      "internalType": "bytes",
                      "name": "signature",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct SignedDelegation[]",
                  "name": "authority",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct Invocation[]",
              "name": "batch",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "queue",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ReplayProtection",
              "name": "replayProtection",
              "type": "tuple"
            }
          ],
          "internalType": "struct Invocations",
          "name": "_input",
          "type": "tuple"
        }
      ],
      "name": "GET_INVOCATIONS_PACKETHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "gasLimit",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Transaction",
              "name": "transaction",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "delegate",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "authority",
                      "type": "bytes32"
                    },
                    {
                      "components": [
                        {
                          "internalType": "address",
                          "name": "enforcer",
                          "type": "address"
                        },
                        {
                          "internalType": "bytes",
                          "name": "terms",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct Caveat[]",
                      "name": "caveats",
                      "type": "tuple[]"
                    }
                  ],
                  "internalType": "struct Delegation",
                  "name": "delegation",
                  "type": "tuple"
                },
                {
                  "internalType": "bytes",
                  "name": "signature",
                  "type": "bytes"
                }
              ],
              "internalType": "struct SignedDelegation[]",
              "name": "authority",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Invocation[]",
          "name": "_input",
          "type": "tuple[]"
        }
      ],
      "name": "GET_INVOCATION_ARRAY_PACKETHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "gasLimit",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Transaction",
              "name": "transaction",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "delegate",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "authority",
                      "type": "bytes32"
                    },
                    {
                      "components": [
                        {
                          "internalType": "address",
                          "name": "enforcer",
                          "type": "address"
                        },
                        {
                          "internalType": "bytes",
                          "name": "terms",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct Caveat[]",
                      "name": "caveats",
                      "type": "tuple[]"
                    }
                  ],
                  "internalType": "struct Delegation",
                  "name": "delegation",
                  "type": "tuple"
                },
                {
                  "internalType": "bytes",
                  "name": "signature",
                  "type": "bytes"
                }
              ],
              "internalType": "struct SignedDelegation[]",
              "name": "authority",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Invocation",
          "name": "_input",
          "type": "tuple"
        }
      ],
      "name": "GET_INVOCATION_PACKETHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "queue",
              "type": "uint256"
            }
          ],
          "internalType": "struct ReplayProtection",
          "name": "_input",
          "type": "tuple"
        }
      ],
      "name": "GET_REPLAYPROTECTION_PACKETHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "delegate",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "authority",
                  "type": "bytes32"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "enforcer",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes",
                      "name": "terms",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct Caveat[]",
                  "name": "caveats",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct Delegation",
              "name": "delegation",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct SignedDelegation[]",
          "name": "_input",
          "type": "tuple[]"
        }
      ],
      "name": "GET_SIGNEDDELEGATION_ARRAY_PACKETHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "delegate",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "authority",
                  "type": "bytes32"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "enforcer",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes",
                      "name": "terms",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct Caveat[]",
                  "name": "caveats",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct Delegation",
              "name": "delegation",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct SignedDelegation",
          "name": "_input",
          "type": "tuple"
        }
      ],
      "name": "GET_SIGNEDDELEGATION_PACKETHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "gasLimit",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Transaction",
          "name": "_input",
          "type": "tuple"
        }
      ],
      "name": "GET_TRANSACTION_PACKETHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "approveTransferProxy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "gasLimit",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Transaction",
              "name": "transaction",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "delegate",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "authority",
                      "type": "bytes32"
                    },
                    {
                      "components": [
                        {
                          "internalType": "address",
                          "name": "enforcer",
                          "type": "address"
                        },
                        {
                          "internalType": "bytes",
                          "name": "terms",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct Caveat[]",
                      "name": "caveats",
                      "type": "tuple[]"
                    }
                  ],
                  "internalType": "struct Delegation",
                  "name": "delegation",
                  "type": "tuple"
                },
                {
                  "internalType": "bytes",
                  "name": "signature",
                  "type": "bytes"
                }
              ],
              "internalType": "struct SignedDelegation[]",
              "name": "authority",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Invocation[]",
          "name": "batch",
          "type": "tuple[]"
        }
      ],
      "name": "contractInvoke",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "domainHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "delegate",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "authority",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "enforcer",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "terms",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Caveat[]",
              "name": "caveats",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Delegation",
          "name": "delegation",
          "type": "tuple"
        }
      ],
      "name": "getDelegationTypedDataHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "contractName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "version",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "verifyingContract",
          "type": "address"
        }
      ],
      "name": "getEIP712DomainHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "delegate",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "authority",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "enforcer",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "terms",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Caveat[]",
              "name": "caveats",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Delegation",
          "name": "_delegation",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "_domainHash",
          "type": "bytes32"
        }
      ],
      "name": "getExternalDelegationTypedDataHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "sigHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "gasLimit",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct Transaction",
                  "name": "transaction",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "address",
                          "name": "delegate",
                          "type": "address"
                        },
                        {
                          "internalType": "bytes32",
                          "name": "authority",
                          "type": "bytes32"
                        },
                        {
                          "components": [
                            {
                              "internalType": "address",
                              "name": "enforcer",
                              "type": "address"
                            },
                            {
                              "internalType": "bytes",
                              "name": "terms",
                              "type": "bytes"
                            }
                          ],
                          "internalType": "struct Caveat[]",
                          "name": "caveats",
                          "type": "tuple[]"
                        }
                      ],
                      "internalType": "struct Delegation",
                      "name": "delegation",
                      "type": "tuple"
                    },
                    {
                      "internalType": "bytes",
                      "name": "signature",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct SignedDelegation[]",
                  "name": "authority",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct Invocation[]",
              "name": "batch",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "queue",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ReplayProtection",
              "name": "replayProtection",
              "type": "tuple"
            }
          ],
          "internalType": "struct Invocations",
          "name": "invocations",
          "type": "tuple"
        }
      ],
      "name": "getInvocationsTypedDataHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "intendedSender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "queue",
          "type": "uint256"
        }
      ],
      "name": "getNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "address",
                          "name": "to",
                          "type": "address"
                        },
                        {
                          "internalType": "uint256",
                          "name": "gasLimit",
                          "type": "uint256"
                        },
                        {
                          "internalType": "bytes",
                          "name": "data",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct Transaction",
                      "name": "transaction",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "components": [
                            {
                              "internalType": "address",
                              "name": "delegate",
                              "type": "address"
                            },
                            {
                              "internalType": "bytes32",
                              "name": "authority",
                              "type": "bytes32"
                            },
                            {
                              "components": [
                                {
                                  "internalType": "address",
                                  "name": "enforcer",
                                  "type": "address"
                                },
                                {
                                  "internalType": "bytes",
                                  "name": "terms",
                                  "type": "bytes"
                                }
                              ],
                              "internalType": "struct Caveat[]",
                              "name": "caveats",
                              "type": "tuple[]"
                            }
                          ],
                          "internalType": "struct Delegation",
                          "name": "delegation",
                          "type": "tuple"
                        },
                        {
                          "internalType": "bytes",
                          "name": "signature",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct SignedDelegation[]",
                      "name": "authority",
                      "type": "tuple[]"
                    }
                  ],
                  "internalType": "struct Invocation[]",
                  "name": "batch",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "nonce",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "queue",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct ReplayProtection",
                  "name": "replayProtection",
                  "type": "tuple"
                }
              ],
              "internalType": "struct Invocations",
              "name": "invocations",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct SignedInvocation[]",
          "name": "signedInvocations",
          "type": "tuple[]"
        }
      ],
      "name": "invoke",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "delegate",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "authority",
                  "type": "bytes32"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "enforcer",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes",
                      "name": "terms",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct Caveat[]",
                  "name": "caveats",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct Delegation",
              "name": "delegation",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct SignedDelegation",
          "name": "_signedDelegation",
          "type": "tuple"
        }
      ],
      "name": "isRevoked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "revoked",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "delegate",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "authority",
                  "type": "bytes32"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "enforcer",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes",
                      "name": "terms",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct Caveat[]",
                  "name": "caveats",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct Delegation",
              "name": "delegation",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct SignedDelegation",
          "name": "_signedDelegation",
          "type": "tuple"
        }
      ],
      "name": "revoke",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferProxy",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "delegate",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "authority",
                  "type": "bytes32"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "enforcer",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes",
                      "name": "terms",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct Caveat[]",
                  "name": "caveats",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct Delegation",
              "name": "delegation",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct SignedDelegation",
          "name": "signedDelegation",
          "type": "tuple"
        }
      ],
      "name": "verifyDelegationSignature",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "delegate",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "authority",
                  "type": "bytes32"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "enforcer",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes",
                      "name": "terms",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct Caveat[]",
                  "name": "caveats",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct Delegation",
              "name": "delegation",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct SignedDelegation",
          "name": "_signedDelegation",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "_domainHash",
          "type": "bytes32"
        }
      ],
      "name": "verifyExternalDelegationSignature",
      "outputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "address",
                          "name": "to",
                          "type": "address"
                        },
                        {
                          "internalType": "uint256",
                          "name": "gasLimit",
                          "type": "uint256"
                        },
                        {
                          "internalType": "bytes",
                          "name": "data",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct Transaction",
                      "name": "transaction",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "components": [
                            {
                              "internalType": "address",
                              "name": "delegate",
                              "type": "address"
                            },
                            {
                              "internalType": "bytes32",
                              "name": "authority",
                              "type": "bytes32"
                            },
                            {
                              "components": [
                                {
                                  "internalType": "address",
                                  "name": "enforcer",
                                  "type": "address"
                                },
                                {
                                  "internalType": "bytes",
                                  "name": "terms",
                                  "type": "bytes"
                                }
                              ],
                              "internalType": "struct Caveat[]",
                              "name": "caveats",
                              "type": "tuple[]"
                            }
                          ],
                          "internalType": "struct Delegation",
                          "name": "delegation",
                          "type": "tuple"
                        },
                        {
                          "internalType": "bytes",
                          "name": "signature",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct SignedDelegation[]",
                      "name": "authority",
                      "type": "tuple[]"
                    }
                  ],
                  "internalType": "struct Invocation[]",
                  "name": "batch",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "nonce",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "queue",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct ReplayProtection",
                  "name": "replayProtection",
                  "type": "tuple"
                }
              ],
              "internalType": "struct Invocations",
              "name": "invocations",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct SignedInvocation",
          "name": "signedInvocation",
          "type": "tuple"
        }
      ],
      "name": "verifyInvocationSignature",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x956f7bd61743db02d70decac5c63c1c409d5fcce9b810fddc432d8ca0af91554",
  "receipt": {
    "to": null,
    "from": "0xd61FA937b8f237901D354f48f6b14995fE468bF2",
    "contractAddress": "0x6C81b826B3975182C959036B27584f63f6B8B08a",
    "transactionIndex": 79,
    "gasUsed": "2117476",
    "logsBloom": "0x
    "blockHash": "0xf7a2cc601e760f3c1a2cb1e9b4450799e268f8af87eba97c3afcab0e4e452eaf",
    "transactionHash": "0x956f7bd61743db02d70decac5c63c1c409d5fcce9b810fddc432d8ca0af91554",
    "logs": [
      {
        "transactionIndex": 79,
        "blockNumber": 44101157,
        "transactionHash": "0x956f7bd61743db02d70decac5c63c1c409d5fcce9b810fddc432d8ca0af91554",
        "address": "0x6C81b826B3975182C959036B27584f63f6B8B08a",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d61fa937b8f237901d354f48f6b14995fe468bf2"
        ],
        "data": "0x",
        "logIndex": 397,
        "blockHash": "0xf7a2cc601e760f3c1a2cb1e9b4450799e268f8af87eba97c3afcab0e4e452eaf"
      },
      {
        "transactionIndex": 79,
        "blockNumber": 44101157,
        "transactionHash": "0x956f7bd61743db02d70decac5c63c1c409d5fcce9b810fddc432d8ca0af91554",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000d61fa937b8f237901d354f48f6b14995fe468bf2",
          "0x000000000000000000000000127685d6dd6683085da4b6a041efcef1681e5c9c"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001c71deab76a6a6000000000000000000000000000000000000000000000000080ae9064125dc214000000000000000000000000000000000000000000000cee678ed5bc65272a530000000000000000000000000000000000000000000000007ee772795af357b4000000000000000000000000000000000000000000000cee6955f3a71c9194b3",
        "logIndex": 398,
        "blockHash": "0xf7a2cc601e760f3c1a2cb1e9b4450799e268f8af87eba97c3afcab0e4e452eaf"
      }
    ],
    "blockNumber": 44101157,
    "cumulativeGasUsed": "17577591",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b3573cec598e845e7f08cf4d6506a1ae",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"enforcer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"terms\",\"type\":\"bytes\"}],\"internalType\":\"struct Caveat[]\",\"name\":\"_input\",\"type\":\"tuple[]\"}],\"name\":\"GET_CAVEAT_ARRAY_PACKETHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"enforcer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"terms\",\"type\":\"bytes\"}],\"internalType\":\"struct Caveat\",\"name\":\"_input\",\"type\":\"tuple\"}],\"name\":\"GET_CAVEAT_PACKETHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"authority\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"enforcer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"terms\",\"type\":\"bytes\"}],\"internalType\":\"struct Caveat[]\",\"name\":\"caveats\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Delegation\",\"name\":\"_input\",\"type\":\"tuple\"}],\"name\":\"GET_DELEGATION_PACKETHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Transaction\",\"name\":\"transaction\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"authority\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"enforcer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"terms\",\"type\":\"bytes\"}],\"internalType\":\"struct Caveat[]\",\"name\":\"caveats\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Delegation\",\"name\":\"delegation\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignedDelegation[]\",\"name\":\"authority\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Invocation[]\",\"name\":\"batch\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"queue\",\"type\":\"uint256\"}],\"internalType\":\"struct ReplayProtection\",\"name\":\"replayProtection\",\"type\":\"tuple\"}],\"internalType\":\"struct Invocations\",\"name\":\"_input\",\"type\":\"tuple\"}],\"name\":\"GET_INVOCATIONS_PACKETHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Transaction\",\"name\":\"transaction\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"authority\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"enforcer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"terms\",\"type\":\"bytes\"}],\"internalType\":\"struct Caveat[]\",\"name\":\"caveats\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Delegation\",\"name\":\"delegation\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignedDelegation[]\",\"name\":\"authority\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Invocation[]\",\"name\":\"_input\",\"type\":\"tuple[]\"}],\"name\":\"GET_INVOCATION_ARRAY_PACKETHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Transaction\",\"name\":\"transaction\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"authority\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"enforcer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"terms\",\"type\":\"bytes\"}],\"internalType\":\"struct Caveat[]\",\"name\":\"caveats\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Delegation\",\"name\":\"delegation\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignedDelegation[]\",\"name\":\"authority\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Invocation\",\"name\":\"_input\",\"type\":\"tuple\"}],\"name\":\"GET_INVOCATION_PACKETHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"queue\",\"type\":\"uint256\"}],\"internalType\":\"struct ReplayProtection\",\"name\":\"_input\",\"type\":\"tuple\"}],\"name\":\"GET_REPLAYPROTECTION_PACKETHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"authority\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"enforcer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"terms\",\"type\":\"bytes\"}],\"internalType\":\"struct Caveat[]\",\"name\":\"caveats\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Delegation\",\"name\":\"delegation\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignedDelegation[]\",\"name\":\"_input\",\"type\":\"tuple[]\"}],\"name\":\"GET_SIGNEDDELEGATION_ARRAY_PACKETHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"authority\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"enforcer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"terms\",\"type\":\"bytes\"}],\"internalType\":\"struct Caveat[]\",\"name\":\"caveats\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Delegation\",\"name\":\"delegation\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignedDelegation\",\"name\":\"_input\",\"type\":\"tuple\"}],\"name\":\"GET_SIGNEDDELEGATION_PACKETHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Transaction\",\"name\":\"_input\",\"type\":\"tuple\"}],\"name\":\"GET_TRANSACTION_PACKETHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"approveTransferProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Transaction\",\"name\":\"transaction\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"authority\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"enforcer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"terms\",\"type\":\"bytes\"}],\"internalType\":\"struct Caveat[]\",\"name\":\"caveats\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Delegation\",\"name\":\"delegation\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignedDelegation[]\",\"name\":\"authority\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Invocation[]\",\"name\":\"batch\",\"type\":\"tuple[]\"}],\"name\":\"contractInvoke\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"authority\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"enforcer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"terms\",\"type\":\"bytes\"}],\"internalType\":\"struct Caveat[]\",\"name\":\"caveats\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Delegation\",\"name\":\"delegation\",\"type\":\"tuple\"}],\"name\":\"getDelegationTypedDataHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"contractName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"}],\"name\":\"getEIP712DomainHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"authority\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"enforcer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"terms\",\"type\":\"bytes\"}],\"internalType\":\"struct Caveat[]\",\"name\":\"caveats\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Delegation\",\"name\":\"_delegation\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_domainHash\",\"type\":\"bytes32\"}],\"name\":\"getExternalDelegationTypedDataHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"sigHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Transaction\",\"name\":\"transaction\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"authority\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"enforcer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"terms\",\"type\":\"bytes\"}],\"internalType\":\"struct Caveat[]\",\"name\":\"caveats\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Delegation\",\"name\":\"delegation\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignedDelegation[]\",\"name\":\"authority\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Invocation[]\",\"name\":\"batch\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"queue\",\"type\":\"uint256\"}],\"internalType\":\"struct ReplayProtection\",\"name\":\"replayProtection\",\"type\":\"tuple\"}],\"internalType\":\"struct Invocations\",\"name\":\"invocations\",\"type\":\"tuple\"}],\"name\":\"getInvocationsTypedDataHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"intendedSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"queue\",\"type\":\"uint256\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Transaction\",\"name\":\"transaction\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"authority\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"enforcer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"terms\",\"type\":\"bytes\"}],\"internalType\":\"struct Caveat[]\",\"name\":\"caveats\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Delegation\",\"name\":\"delegation\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignedDelegation[]\",\"name\":\"authority\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Invocation[]\",\"name\":\"batch\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"queue\",\"type\":\"uint256\"}],\"internalType\":\"struct ReplayProtection\",\"name\":\"replayProtection\",\"type\":\"tuple\"}],\"internalType\":\"struct Invocations\",\"name\":\"invocations\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignedInvocation[]\",\"name\":\"signedInvocations\",\"type\":\"tuple[]\"}],\"name\":\"invoke\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"authority\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"enforcer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"terms\",\"type\":\"bytes\"}],\"internalType\":\"struct Caveat[]\",\"name\":\"caveats\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Delegation\",\"name\":\"delegation\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignedDelegation\",\"name\":\"_signedDelegation\",\"type\":\"tuple\"}],\"name\":\"isRevoked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"revoked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"authority\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"enforcer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"terms\",\"type\":\"bytes\"}],\"internalType\":\"struct Caveat[]\",\"name\":\"caveats\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Delegation\",\"name\":\"delegation\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignedDelegation\",\"name\":\"_signedDelegation\",\"type\":\"tuple\"}],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferProxy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"authority\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"enforcer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"terms\",\"type\":\"bytes\"}],\"internalType\":\"struct Caveat[]\",\"name\":\"caveats\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Delegation\",\"name\":\"delegation\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignedDelegation\",\"name\":\"signedDelegation\",\"type\":\"tuple\"}],\"name\":\"verifyDelegationSignature\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"authority\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"enforcer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"terms\",\"type\":\"bytes\"}],\"internalType\":\"struct Caveat[]\",\"name\":\"caveats\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Delegation\",\"name\":\"delegation\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignedDelegation\",\"name\":\"_signedDelegation\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_domainHash\",\"type\":\"bytes32\"}],\"name\":\"verifyExternalDelegationSignature\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Transaction\",\"name\":\"transaction\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"authority\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"enforcer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"terms\",\"type\":\"bytes\"}],\"internalType\":\"struct Caveat[]\",\"name\":\"caveats\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Delegation\",\"name\":\"delegation\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignedDelegation[]\",\"name\":\"authority\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Invocation[]\",\"name\":\"batch\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"queue\",\"type\":\"uint256\"}],\"internalType\":\"struct ReplayProtection\",\"name\":\"replayProtection\",\"type\":\"tuple\"}],\"internalType\":\"struct Invocations\",\"name\":\"invocations\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignedInvocation\",\"name\":\"signedInvocation\",\"type\":\"tuple\"}],\"name\":\"verifyInvocationSignature\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"McOso\",\"kind\":\"dev\",\"methods\":{\"contractInvoke(((address,uint256,bytes),((address,bytes32,(address,bytes)[]),bytes)[])[])\":{\"params\":{\"batch\":\"Invocation[] - The batch of invocations to process.\"},\"returns\":{\"_0\":\"success bool - Whether the batch of invocations was successfully processed.\"}},\"getDelegationTypedDataHash((address,bytes32,(address,bytes)[]))\":{\"params\":{\"delegation\":\"Delegation - The delegation to get the type of\"},\"returns\":{\"_0\":\"bytes32 - The type of the delegation\"}},\"getInvocationsTypedDataHash((((address,uint256,bytes),((address,bytes32,(address,bytes)[]),bytes)[])[],(uint256,uint256)))\":{\"params\":{\"invocations\":\"Invocations\"},\"returns\":{\"_0\":\"bytes32 - The type of the Invocations\"}},\"invoke(((((address,uint256,bytes),((address,bytes32,(address,bytes)[]),bytes)[])[],(uint256,uint256)),bytes)[])\":{\"params\":{\"signedInvocations\":\"SignedInvocation[] - The batch of signed invocations to process.\"},\"returns\":{\"success\":\"bool - Whether the batch of invocations was successfully processed.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"verifyInvocationSignature(((((address,uint256,bytes),((address,bytes32,(address,bytes)[]),bytes)[])[],(uint256,uint256)),bytes))\":{\"params\":{\"signedInvocation\":\"- The signed invocation to verify\"},\"returns\":{\"_0\":\"address - The address of the account authorizing this invocation to act on its behalf.\"}}},\"title\":\"ERC20Manager\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"contractInvoke(((address,uint256,bytes),((address,bytes32,(address,bytes)[]),bytes)[])[])\":{\"notice\":\"Allows a smart contract to submit a batch of invocations for processing, allowing itself to be the delegate.\"},\"domainHash()\":{\"notice\":\"The hash of the domain separator used in the EIP712 domain hash.\"},\"getDelegationTypedDataHash((address,bytes32,(address,bytes)[]))\":{\"notice\":\"Returns the typehash for this contract's delegation signatures.\"},\"getInvocationsTypedDataHash((((address,uint256,bytes),((address,bytes32,(address,bytes)[]),bytes)[])[],(uint256,uint256)))\":{\"notice\":\"Returns the typehash for this contract's invocation signatures.\"},\"invoke(((((address,uint256,bytes),((address,bytes32,(address,bytes)[]),bytes)[])[],(uint256,uint256)),bytes)[])\":{\"notice\":\"Allows anyone to submit a batch of signed invocations for processing.\"},\"verifyInvocationSignature(((((address,uint256,bytes),((address,bytes32,(address,bytes)[]),bytes)[])[],(uint256,uint256)),bytes))\":{\"notice\":\"Verifies that the given invocation is valid.\"}},\"notice\":\"Manages the erc20 delegation\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC20Manager.sol\":\"ERC20Manager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@delegatable/delegatable-sol/contracts/CaveatEnforcer.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"./TypesAndDecoders.sol\\\";\\n\\nabstract contract CaveatEnforcer {\\n    function enforceCaveat(\\n        bytes calldata terms,\\n        Transaction calldata tx,\\n        bytes32 delegationHash\\n    ) public virtual returns (bool);\\n}\\n\",\"keccak256\":\"0x14ec17bfb3cc94c4a0a81bbddf681150be2b574176294cee3c6fb21ab0f62fa3\",\"license\":\"MIT\"},\"@delegatable/delegatable-sol/contracts/TypesAndDecoders.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\nimport \\\"./libraries/ECRecovery.sol\\\";\\n\\n// BEGIN EIP712 AUTOGENERATED SETUP\\nstruct EIP712Domain {\\n    string name;\\n    string version;\\n    uint256 chainId;\\n    address verifyingContract;\\n}\\n\\nbytes32 constant EIP712DOMAIN_TYPEHASH = keccak256(\\n    \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n);\\n\\nstruct Invocation {\\n    Transaction transaction;\\n    SignedDelegation[] authority;\\n}\\n\\nbytes32 constant INVOCATION_TYPEHASH = keccak256(\\n    \\\"Invocation(Transaction transaction,SignedDelegation[] authority)Caveat(address enforcer,bytes terms)Delegation(address delegate,bytes32 authority,Caveat[] caveats)SignedDelegation(Delegation delegation,bytes signature)Transaction(address to,uint256 gasLimit,bytes data)\\\"\\n);\\n\\nstruct Invocations {\\n    Invocation[] batch;\\n    ReplayProtection replayProtection;\\n}\\n\\nbytes32 constant INVOCATIONS_TYPEHASH = keccak256(\\n    \\\"Invocations(Invocation[] batch,ReplayProtection replayProtection)Caveat(address enforcer,bytes terms)Delegation(address delegate,bytes32 authority,Caveat[] caveats)Invocation(Transaction transaction,SignedDelegation[] authority)ReplayProtection(uint nonce,uint queue)SignedDelegation(Delegation delegation,bytes signature)Transaction(address to,uint256 gasLimit,bytes data)\\\"\\n);\\n\\nstruct SignedInvocation {\\n    Invocations invocations;\\n    bytes signature;\\n}\\n\\nbytes32 constant SIGNEDINVOCATION_TYPEHASH = keccak256(\\n    \\\"SignedInvocation(Invocations invocations,bytes signature)Caveat(address enforcer,bytes terms)Delegation(address delegate,bytes32 authority,Caveat[] caveats)Invocation(Transaction transaction,SignedDelegation[] authority)Invocations(Invocation[] batch,ReplayProtection replayProtection)ReplayProtection(uint nonce,uint queue)SignedDelegation(Delegation delegation,bytes signature)Transaction(address to,uint256 gasLimit,bytes data)\\\"\\n);\\n\\nstruct Transaction {\\n    address to;\\n    uint256 gasLimit;\\n    bytes data;\\n}\\n\\nbytes32 constant TRANSACTION_TYPEHASH = keccak256(\\n    \\\"Transaction(address to,uint256 gasLimit,bytes data)\\\"\\n);\\n\\nstruct ReplayProtection {\\n    uint256 nonce;\\n    uint256 queue;\\n}\\n\\nbytes32 constant REPLAYPROTECTION_TYPEHASH = keccak256(\\n    \\\"ReplayProtection(uint nonce,uint queue)\\\"\\n);\\n\\nstruct Delegation {\\n    address delegate;\\n    bytes32 authority;\\n    Caveat[] caveats;\\n}\\n\\nbytes32 constant DELEGATION_TYPEHASH = keccak256(\\n    \\\"Delegation(address delegate,bytes32 authority,Caveat[] caveats)Caveat(address enforcer,bytes terms)\\\"\\n);\\n\\nstruct Caveat {\\n    address enforcer;\\n    bytes terms;\\n}\\n\\nbytes32 constant CAVEAT_TYPEHASH = keccak256(\\n    \\\"Caveat(address enforcer,bytes terms)\\\"\\n);\\n\\nstruct SignedDelegation {\\n    Delegation delegation;\\n    bytes signature;\\n}\\n\\nbytes32 constant SIGNEDDELEGATION_TYPEHASH = keccak256(\\n    \\\"SignedDelegation(Delegation delegation,bytes signature)Caveat(address enforcer,bytes terms)Delegation(address delegate,bytes32 authority,Caveat[] caveats)\\\"\\n);\\n\\n// END EIP712 AUTOGENERATED SETUP\\n\\ncontract EIP712Decoder is ECRecovery {\\n    // BEGIN EIP712 AUTOGENERATED BODY. See scripts/typesToCode.js\\n\\n    // function GET_EIP712DOMAIN_PACKETHASH(EIP712Domain memory _input)\\n    //     public\\n    //     pure\\n    //     returns (bytes32)\\n    // {\\n    //     bytes memory encoded = abi.encode(\\n    //         EIP712DOMAIN_TYPEHASH,\\n    //         _input.name,\\n    //         _input.version,\\n    //         _input.chainId,\\n    //         _input.verifyingContract\\n    //     );\\n\\n    //     return keccak256(encoded);\\n    // }\\n\\n    function GET_INVOCATION_PACKETHASH(Invocation memory _input)\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        bytes memory encoded = abi.encode(\\n            INVOCATION_TYPEHASH,\\n            GET_TRANSACTION_PACKETHASH(_input.transaction),\\n            GET_SIGNEDDELEGATION_ARRAY_PACKETHASH(_input.authority)\\n        );\\n\\n        return keccak256(encoded);\\n    }\\n\\n    function GET_SIGNEDDELEGATION_ARRAY_PACKETHASH(\\n        SignedDelegation[] memory _input\\n    ) public pure returns (bytes32) {\\n        bytes memory encoded;\\n        for (uint256 i = 0; i < _input.length; i++) {\\n            encoded = bytes.concat(\\n                encoded,\\n                GET_SIGNEDDELEGATION_PACKETHASH(_input[i])\\n            );\\n        }\\n\\n        bytes32 hash = keccak256(encoded);\\n        return hash;\\n    }\\n\\n    function GET_INVOCATIONS_PACKETHASH(Invocations memory _input)\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        bytes memory encoded = abi.encode(\\n            INVOCATIONS_TYPEHASH,\\n            GET_INVOCATION_ARRAY_PACKETHASH(_input.batch),\\n            GET_REPLAYPROTECTION_PACKETHASH(_input.replayProtection)\\n        );\\n\\n        return keccak256(encoded);\\n    }\\n\\n    function GET_INVOCATION_ARRAY_PACKETHASH(Invocation[] memory _input)\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        bytes memory encoded;\\n        for (uint256 i = 0; i < _input.length; i++) {\\n            encoded = bytes.concat(\\n                encoded,\\n                GET_INVOCATION_PACKETHASH(_input[i])\\n            );\\n        }\\n\\n        bytes32 hash = keccak256(encoded);\\n        return hash;\\n    }\\n\\n    // function GET_SIGNEDINVOCATION_PACKETHASH(SignedInvocation memory _input)\\n    //     public\\n    //     pure\\n    //     returns (bytes32)\\n    // {\\n    //     bytes memory encoded = abi.encode(\\n    //         SIGNEDINVOCATION_TYPEHASH,\\n    //         GET_INVOCATIONS_PACKETHASH(_input.invocations),\\n    //         keccak256(_input.signature)\\n    //     );\\n\\n    //     return keccak256(encoded);\\n    // }\\n\\n    function GET_TRANSACTION_PACKETHASH(Transaction memory _input)\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        bytes memory encoded = abi.encode(\\n            TRANSACTION_TYPEHASH,\\n            _input.to,\\n            _input.gasLimit,\\n            keccak256(_input.data)\\n        );\\n\\n        return keccak256(encoded);\\n    }\\n\\n    function GET_REPLAYPROTECTION_PACKETHASH(ReplayProtection memory _input)\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        bytes memory encoded = abi.encode(\\n            REPLAYPROTECTION_TYPEHASH,\\n            _input.nonce,\\n            _input.queue\\n        );\\n\\n        return keccak256(encoded);\\n    }\\n\\n    function GET_DELEGATION_PACKETHASH(Delegation memory _input)\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        bytes memory encoded = abi.encode(\\n            DELEGATION_TYPEHASH,\\n            _input.delegate,\\n            _input.authority,\\n            GET_CAVEAT_ARRAY_PACKETHASH(_input.caveats)\\n        );\\n\\n        return keccak256(encoded);\\n    }\\n\\n    function GET_CAVEAT_ARRAY_PACKETHASH(Caveat[] memory _input)\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        bytes memory encoded;\\n        for (uint256 i = 0; i < _input.length; i++) {\\n            encoded = bytes.concat(encoded, GET_CAVEAT_PACKETHASH(_input[i]));\\n        }\\n\\n        bytes32 hash = keccak256(encoded);\\n        return hash;\\n    }\\n\\n    function GET_CAVEAT_PACKETHASH(Caveat memory _input)\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        bytes memory encoded = abi.encode(\\n            CAVEAT_TYPEHASH,\\n            _input.enforcer,\\n            keccak256(_input.terms)\\n        );\\n\\n        return keccak256(encoded);\\n    }\\n\\n    function GET_SIGNEDDELEGATION_PACKETHASH(SignedDelegation memory _input)\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        bytes memory encoded = abi.encode(\\n            SIGNEDDELEGATION_TYPEHASH,\\n            GET_DELEGATION_PACKETHASH(_input.delegation),\\n            keccak256(_input.signature)\\n        );\\n\\n        return keccak256(encoded);\\n    }\\n}\\n\",\"keccak256\":\"0x62c25b5d5fd7e3390c184c776b29a08a4c3b9859efc54483114e6e8c817b4cfa\",\"license\":\"MIT\"},\"@delegatable/delegatable-sol/contracts/interfaces/IDelegatable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"../TypesAndDecoders.sol\\\";\\n\\ninterface IDelegatable {\\n    /**\\n     * @notice Allows a smart contract to submit a batch of invocations for processing, allowing itself to be the delegate.\\n     * @param batch Invocation[] - The batch of invocations to process.\\n     * @return success bool - Whether the batch of invocations was successfully processed.\\n     */\\n    function contractInvoke(Invocation[] calldata batch)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @notice Allows anyone to submit a batch of signed invocations for processing.\\n     * @param signedInvocations SignedInvocation[] - The batch of signed invocations to process.\\n     * @return success bool - Whether the batch of invocations was successfully processed.\\n     */\\n    function invoke(SignedInvocation[] calldata signedInvocations)\\n        external\\n        returns (bool success);\\n\\n    /**\\n     * @notice Returns the typehash for this contract's delegation signatures.\\n     * @param delegation Delegation - The delegation to get the type of\\n     * @return bytes32 - The type of the delegation\\n     */\\n    function getDelegationTypedDataHash(Delegation memory delegation)\\n        external\\n        view\\n        returns (bytes32);\\n\\n    /**\\n     * @notice Returns the typehash for this contract's invocation signatures.\\n     * @param invocations Invocations\\n     * @return bytes32 - The type of the Invocations\\n     */\\n    function getInvocationsTypedDataHash(Invocations memory invocations)\\n        external\\n        view\\n        returns (bytes32);\\n\\n    function getEIP712DomainHash(\\n        string memory contractName,\\n        string memory version,\\n        uint256 chainId,\\n        address verifyingContract\\n    ) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Verifies that the given invocation is valid.\\n     * @param signedInvocation - The signed invocation to verify\\n     * @return address - The address of the account authorizing this invocation to act on its behalf.\\n     */\\n    function verifyInvocationSignature(SignedInvocation memory signedInvocation)\\n        external\\n        view\\n        returns (address);\\n\\n    /**\\n     * @notice Verifies that the given delegation is valid.\\n     * @param signedDelegation - The delegation to verify\\n     * @return address - The address of the account authorizing this delegation to act on its behalf.\\n     */\\n    function verifyDelegationSignature(SignedDelegation memory signedDelegation)\\n        external\\n        view\\n        returns (address);\\n}\\n\",\"keccak256\":\"0x1b536288fc232c912492fd39e361bab56e81676b31225e1a33503819c604be11\",\"license\":\"MIT\"},\"@delegatable/delegatable-sol/contracts/libraries/ECRecovery.sol\":{\"content\":\"pragma solidity 0.8.15;\\n\\n// SPDX-License-Identifier: MIT\\n\\ncontract ECRecovery {\\n    /**\\n     * @dev Recover signer address from a message by using their signature\\n     * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\\n     * @param sig bytes signature, the signature is generated using web3.eth.sign()\\n     */\\n    function recover(bytes32 hash, bytes memory sig)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        //Check the signature length\\n        if (sig.length != 65) {\\n            return (address(0));\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        assembly {\\n            r := mload(add(sig, 32))\\n            s := mload(add(sig, 64))\\n            v := byte(0, mload(add(sig, 96)))\\n        }\\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\\n        if (v < 27) {\\n            v += 27;\\n        }\\n\\n        // If the version is correct return the signer address\\n        if (v != 27 && v != 28) {\\n            return (address(0));\\n        } else {\\n            return ecrecover(hash, v, r, s);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdcd8b97fb382a5e43e7a9000515dfad14263e8ab7f548b276b5952e7970fee03\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Delegatable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\n// import \\\"hardhat/console.sol\\\";\\nimport {EIP712DOMAIN_TYPEHASH} from \\\"@delegatable/delegatable-sol/contracts/TypesAndDecoders.sol\\\";\\nimport {Delegation, Invocation, Invocations, SignedInvocation, SignedDelegation} from \\\"@delegatable/delegatable-sol/contracts/CaveatEnforcer.sol\\\";\\nimport {DelegatableCore} from \\\"./DelegatableCore.sol\\\";\\nimport {IDelegatable} from \\\"@delegatable/delegatable-sol/contracts/interfaces/IDelegatable.sol\\\";\\n\\nabstract contract Delegatable is IDelegatable, DelegatableCore {\\n    /// @notice The hash of the domain separator used in the EIP712 domain hash.\\n    bytes32 public immutable domainHash;\\n\\n    /**\\n     * @notice Delegatable Constructor\\n     * @param contractName string - The name of the contract\\n     * @param version string - The version of the contract\\n     */\\n    constructor(string memory contractName, string memory version) {\\n        domainHash = getEIP712DomainHash(\\n            contractName,\\n            version,\\n            block.chainid,\\n            address(this)\\n        );\\n    }\\n\\n    /* ===================================================================================== */\\n    /* External Functions                                                                    */\\n    /* ===================================================================================== */\\n\\n    /// @inheritdoc IDelegatable\\n    function getDelegationTypedDataHash(Delegation memory delegation)\\n        public\\n        view\\n        returns (bytes32)\\n    {\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                domainHash,\\n                GET_DELEGATION_PACKETHASH(delegation)\\n            )\\n        );\\n        return digest;\\n    }\\n\\n    /// @inheritdoc IDelegatable\\n    function getInvocationsTypedDataHash(Invocations memory invocations)\\n        public\\n        view\\n        returns (bytes32)\\n    {\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                domainHash,\\n                GET_INVOCATIONS_PACKETHASH(invocations)\\n            )\\n        );\\n        return digest;\\n    }\\n\\n    function getEIP712DomainHash(\\n        string memory contractName,\\n        string memory version,\\n        uint256 chainId,\\n        address verifyingContract\\n    ) public pure returns (bytes32) {\\n        bytes memory encoded = abi.encode(\\n            EIP712DOMAIN_TYPEHASH,\\n            keccak256(bytes(contractName)),\\n            keccak256(bytes(version)),\\n            chainId,\\n            verifyingContract\\n        );\\n        return keccak256(encoded);\\n    }\\n\\n    function verifyDelegationSignature(SignedDelegation memory signedDelegation)\\n        public\\n        view\\n        virtual\\n        override(IDelegatable, DelegatableCore)\\n        returns (address)\\n    {\\n        Delegation memory delegation = signedDelegation.delegation;\\n        bytes32 sigHash = getDelegationTypedDataHash(delegation);\\n        address recoveredSignatureSigner = recover(\\n            sigHash,\\n            signedDelegation.signature\\n        );\\n        return recoveredSignatureSigner;\\n    }\\n\\n    function verifyInvocationSignature(SignedInvocation memory signedInvocation)\\n        public\\n        view\\n        returns (address)\\n    {\\n        bytes32 sigHash = getInvocationsTypedDataHash(\\n            signedInvocation.invocations\\n        );\\n        address recoveredSignatureSigner = recover(\\n            sigHash,\\n            signedInvocation.signature\\n        );\\n        return recoveredSignatureSigner;\\n    }\\n\\n    // --------------------------------------\\n    // WRITES\\n    // --------------------------------------\\n\\n    /// @inheritdoc IDelegatable\\n    function contractInvoke(Invocation[] calldata batch)\\n        external\\n        override\\n        returns (bool)\\n    {\\n        return _invoke(batch, msg.sender);\\n    }\\n\\n    /// @inheritdoc IDelegatable\\n    function invoke(SignedInvocation[] calldata signedInvocations)\\n        external\\n        virtual\\n        override\\n        returns (bool success)\\n    {\\n        for (uint256 i = 0; i < signedInvocations.length; i++) {\\n            SignedInvocation calldata signedInvocation = signedInvocations[i];\\n            address invocationSigner = verifyInvocationSignature(\\n                signedInvocation\\n            );\\n            _enforceReplayProtection(\\n                invocationSigner,\\n                signedInvocations[i].invocations.replayProtection\\n            );\\n            success = _invoke(\\n                signedInvocation.invocations.batch,\\n                invocationSigner\\n            );\\n        }\\n    }\\n\\n    /* ===================================================================================== */\\n    /* Internal Functions                                                                    */\\n    /* ===================================================================================== */\\n}\\n\",\"keccak256\":\"0xce42b92dabaccae33eab835ff689249d3c253c885ad4bc046e864265f99c8da3\",\"license\":\"MIT\"},\"contracts/DelegatableCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.15;\\r\\n\\r\\nimport {EIP712Decoder, EIP712DOMAIN_TYPEHASH} from \\\"@delegatable/delegatable-sol/contracts/TypesAndDecoders.sol\\\";\\r\\nimport {Delegation, Invocation, Invocations, SignedInvocation, SignedDelegation, Transaction, ReplayProtection, CaveatEnforcer} from \\\"@delegatable/delegatable-sol/contracts/CaveatEnforcer.sol\\\";\\r\\n\\r\\nabstract contract DelegatableCore is EIP712Decoder {\\r\\n    /// @notice Account delegation nonce manager\\r\\n    mapping(address => mapping(uint256 => uint256)) internal multiNonce;\\r\\n\\r\\n    function getNonce(address intendedSender, uint256 queue)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return multiNonce[intendedSender][queue];\\r\\n    }\\r\\n\\r\\n    function verifyDelegationSignature(SignedDelegation memory signedDelegation)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        returns (address);\\r\\n\\r\\n    function _enforceReplayProtection(\\r\\n        address intendedSender,\\r\\n        ReplayProtection memory protection\\r\\n    ) internal {\\r\\n        uint256 queue = protection.queue;\\r\\n        uint256 nonce = protection.nonce;\\r\\n        require(\\r\\n            nonce == (multiNonce[intendedSender][queue] + 1),\\r\\n            \\\"DelegatableCore:nonce2-out-of-order\\\"\\r\\n        );\\r\\n        multiNonce[intendedSender][queue] = nonce;\\r\\n    }\\r\\n\\r\\n    function _execute(\\r\\n        address to,\\r\\n        bytes memory data,\\r\\n        uint256 gasLimit,\\r\\n        address sender\\r\\n    ) internal returns (bool success) {\\r\\n        bytes memory full = abi.encodePacked(data, sender);\\r\\n        bytes memory errorMessage;\\r\\n        (success, errorMessage) = address(to).call{gas: gasLimit}(full);\\r\\n\\r\\n        if (!success) {\\r\\n            if (errorMessage.length > 0) {\\r\\n                string memory reason = extractRevertReason(errorMessage);\\r\\n                revert(reason);\\r\\n            } else {\\r\\n                revert(\\\"DelegatableCore::execution-failed\\\");\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function extractRevertReason(bytes memory revertData)\\r\\n        internal\\r\\n        pure\\r\\n        returns (string memory reason)\\r\\n    {\\r\\n        uint256 l = revertData.length;\\r\\n        if (l < 68) return \\\"\\\";\\r\\n        uint256 t;\\r\\n        assembly {\\r\\n            revertData := add(revertData, 4)\\r\\n            t := mload(revertData) // Save the content of the length slot\\r\\n            mstore(revertData, sub(l, 4)) // Set proper length\\r\\n        }\\r\\n        reason = abi.decode(revertData, (string));\\r\\n        assembly {\\r\\n            mstore(revertData, t) // Restore the content of the length slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _invoke(Invocation[] calldata batch, address sender)\\r\\n        internal\\r\\n        returns (bool success)\\r\\n    {\\r\\n        for (uint256 x = 0; x < batch.length; x++) {\\r\\n            Invocation memory invocation = batch[x];\\r\\n            address intendedSender;\\r\\n            address canGrant;\\r\\n\\r\\n            // If there are no delegations, this invocation comes from the signer\\r\\n            if (invocation.authority.length == 0) {\\r\\n                intendedSender = sender;\\r\\n                canGrant = intendedSender;\\r\\n            }\\r\\n\\r\\n            bytes32 authHash = 0x0;\\r\\n\\r\\n            for (uint256 d = 0; d < invocation.authority.length; d++) {\\r\\n                SignedDelegation memory signedDelegation = invocation.authority[\\r\\n                    d\\r\\n                ];\\r\\n                address delegationSigner = verifyDelegationSignature(\\r\\n                    signedDelegation\\r\\n                );\\r\\n\\r\\n                // Implied sending account is the signer of the first delegation\\r\\n                if (d == 0) {\\r\\n                    intendedSender = delegationSigner;\\r\\n                    canGrant = intendedSender;\\r\\n                }\\r\\n\\r\\n                require(\\r\\n                    delegationSigner == canGrant,\\r\\n                    \\\"DelegatableCore:invalid-delegation-signer\\\"\\r\\n                );\\r\\n\\r\\n                Delegation memory delegation = signedDelegation.delegation;\\r\\n                require(\\r\\n                    delegation.authority == authHash,\\r\\n                    \\\"DelegatableCore:invalid-authority-delegation-link\\\"\\r\\n                );\\r\\n\\r\\n                // TODO: maybe delegations should have replay protection, at least a nonce (non order dependent),\\r\\n                // otherwise once it's revoked, you can't give the exact same permission again.\\r\\n                bytes32 delegationHash = GET_SIGNEDDELEGATION_PACKETHASH(\\r\\n                    signedDelegation\\r\\n                );\\r\\n\\r\\n                // Each delegation can include any number of caveats.\\r\\n                // A caveat is any condition that may reject a proposed transaction.\\r\\n                // The caveats specify an external contract that is passed the proposed tx,\\r\\n                // As well as some extra terms that are used to parameterize the enforcer.\\r\\n                for (uint16 y = 0; y < delegation.caveats.length; y++) {\\r\\n                    CaveatEnforcer enforcer = CaveatEnforcer(\\r\\n                        delegation.caveats[y].enforcer\\r\\n                    );\\r\\n                    bool caveatSuccess = enforcer.enforceCaveat(\\r\\n                        delegation.caveats[y].terms,\\r\\n                        invocation.transaction,\\r\\n                        delegationHash\\r\\n                    );\\r\\n                    require(caveatSuccess, \\\"DelegatableCore:caveat-rejected\\\");\\r\\n                }\\r\\n\\r\\n                // Store the hash of this delegation in `authHash`\\r\\n                // That way the next delegation can be verified against it.\\r\\n                authHash = delegationHash;\\r\\n                canGrant = delegation.delegate;\\r\\n            }\\r\\n\\r\\n            // Verify the delegate at the end of the delegation chain is the signer\\r\\n            require(canGrant == sender, \\\"DelegatableCore:invalid-delegate\\\");\\r\\n\\r\\n            // Here we perform the requested invocation.\\r\\n            Transaction memory transaction = invocation.transaction;\\r\\n\\r\\n            require(\\r\\n                transaction.to == address(this),\\r\\n                \\\"DelegatableCore:invalid-invocation-target\\\"\\r\\n            );\\r\\n\\r\\n            success = _execute(\\r\\n                transaction.to,\\r\\n                transaction.data,\\r\\n                transaction.gasLimit,\\r\\n                intendedSender\\r\\n            );\\r\\n            require(success, \\\"DelegatableCore::execution-failed\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _msgSender() internal view virtual returns (address sender) {\\r\\n        if (msg.sender == address(this)) {\\r\\n            bytes memory array = msg.data;\\r\\n            uint256 index = msg.data.length;\\r\\n            assembly {\\r\\n                sender := and(\\r\\n                    mload(add(array, index)),\\r\\n                    0xffffffffffffffffffffffffffffffffffffffff\\r\\n                )\\r\\n            }\\r\\n        } else {\\r\\n            sender = msg.sender;\\r\\n        }\\r\\n        return sender;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x8480f74a4c1daa7698bb861a795f650a9e60d80a25d8f7710af3b23b2c027153\",\"license\":\"MIT\"},\"contracts/ERC20Manager.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport { Delegatable } from \\\"./Delegatable.sol\\\";\\nimport { DelegatableCore } from \\\"./DelegatableCore.sol\\\";\\nimport \\\"@delegatable/delegatable-sol/contracts/TypesAndDecoders.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title ERC20Manager\\n * @author McOso\\n * @notice Manages the erc20 delegation\\n */\\ncontract ERC20Manager is Delegatable, Ownable {\\n  /* ===================================================================================== */\\n  /* Constructor & Modifiers                                                               */\\n  /* ===================================================================================== */\\n\\n  mapping(bytes32 => bool) revokedMap;\\n\\n  constructor() Delegatable(\\\"ERC20Manager\\\", \\\"1\\\") {}\\n\\n  /* ===================================================================================== */\\n  /* External Functions                                                                    */\\n  /* ===================================================================================== */\\n\\n  // ========================\\n  // READS\\n  // ========================\\n  function verifyExternalDelegationSignature(SignedDelegation memory _signedDelegation, bytes32 _domainHash) public view virtual returns (address signer) {\\n      Delegation memory delegation_ = _signedDelegation.delegation;\\n      bytes32 sigHash_ = getExternalDelegationTypedDataHash(delegation_, _domainHash);\\n      return recover(sigHash_, _signedDelegation.signature);\\n  }\\n\\n  function getExternalDelegationTypedDataHash(Delegation memory _delegation, bytes32 _domainHash) public pure returns (bytes32 sigHash) {\\n      return keccak256(\\n          abi.encodePacked(\\n              \\\"\\\\x19\\\\x01\\\",\\n              _domainHash,\\n              GET_DELEGATION_PACKETHASH(_delegation)\\n          )\\n      );\\n  }\\n\\n  function isRevoked(SignedDelegation memory _signedDelegation) public view returns (bool revoked) {\\n    bytes32 delegationHash_ = GET_SIGNEDDELEGATION_PACKETHASH(_signedDelegation);\\n    return revokedMap[delegationHash_];\\n  }\\n\\n  // ========================\\n  // WRITES\\n  // ========================\\n  function approveTransferProxy(\\n    address _token,\\n    address _from,\\n    uint256 _amount,\\n    uint256 _deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external {\\n    require(msg.sender == address(this), \\\"ERC20Manager:invalid-sender\\\");\\n    IERC20Permit(_token).permit(_from, address(this), _amount, _deadline, v, r, s);\\n  }\\n\\n  function transferProxy(\\n    address _token,\\n    address _to,\\n    uint256 _amount\\n  ) external returns (bool) {\\n    require(msg.sender == address(this), \\\"ERC20Manager:transferProxy-not-authorized\\\");\\n    return IERC20(_token).transferFrom(_msgSender(), _to, _amount);\\n  }\\n\\n  function revoke(SignedDelegation calldata _signedDelegation) external {\\n    address signer_ = verifyExternalDelegationSignature(_signedDelegation, domainHash);\\n    require(msg.sender == signer_, \\\"ERC20Manager:unauthorized-revoke\\\");\\n\\n    bytes32 delegationHash_ = GET_SIGNEDDELEGATION_PACKETHASH(_signedDelegation);\\n    revokedMap[delegationHash_] = true;\\n  }\\n\\n  function invoke(SignedInvocation[] calldata signedInvocations)\\n    external\\n    override\\n    returns (bool success)\\n  {\\n      for (uint256 i = 0; i < signedInvocations.length; i++) {\\n          SignedInvocation calldata signedInvocation = signedInvocations[i];\\n\\n          for (uint256 j = 0; j < signedInvocation.invocations.batch.length; j++){\\n            Invocation memory invocation = signedInvocation.invocations.batch[j];\\n            for (uint256 k = 0; k < invocation.authority.length; k++){\\n              require(!isRevoked(invocation.authority[k]), \\\"ERC20Manager:revoked-delegation\\\");\\n            }\\n          }\\n          \\n          address invocationSigner = verifyInvocationSignature(\\n              signedInvocation\\n          );\\n          _enforceReplayProtection(\\n              invocationSigner,\\n              signedInvocations[i].invocations.replayProtection\\n          );\\n          success = _invoke(\\n              signedInvocation.invocations.batch,\\n              invocationSigner\\n          );\\n      }\\n  }\\n\\n  /* ===================================================================================== */\\n  /* Internal Functions                                                                    */\\n  /* ===================================================================================== */\\n  function _msgSender()\\n    internal\\n    view\\n    virtual\\n    override(DelegatableCore, Context)\\n    returns (address sender)\\n  {\\n    if (msg.sender == address(this)) {\\n      bytes memory array = msg.data;\\n      uint256 index = msg.data.length;\\n      assembly {\\n        sender := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\n      }\\n    } else {\\n      sender = msg.sender;\\n    }\\n    return sender;\\n  }\\n}\\n\",\"keccak256\":\"0x9a60b4569f0f0c973ab98bf15ab9600cbafd6bd97d0cf356aba173359a03ecbb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040518060400160405280600c81526020016b22a921991826b0b730b3b2b960a11b815250604051806040016040528060018152602001603160f81b81525062000065828246306200008560201b60201c565b608052506200007f90506200007962000101565b6200015f565b620001b1565b8351602094850120835193850193909320604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f8188015280820195909552606085019190915260808401929092526001600160a01b031660a0808401919091528151808403909101815260c09092019052805191012090565b60003033036200015957600080368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b031691506200015c9050565b50335b90565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6080516124cf620001e26000396000818161044b0152818161096901528181610bb30152610e3d01526124cf6000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c806389535803116100f9578063caced6c511610097578063e33150db11610071578063e33150db1461046d578063f2fde38b14610480578063f6037c9614610493578063fb8ad30d146104a657600080fd5b8063caced6c5146103a9578063d327c1eb146103bc578063dfe86ac51461044657600080fd5b806397182ed6116100d357806397182ed61461035d578063a2e01f7514610370578063a58ab45c14610383578063c57cbe4b1461039657600080fd5b806389535803146102ed5780638a04499e146103215780638da5cb5b1461034c57600080fd5b806360b6d76811610166578063715018a611610140578063715018a6146102aa5780637234eefe146102b4578063736f7ce7146102c75780637b577b58146102da57600080fd5b806360b6d768146102715780636c2b1253146102845780636f9658031461029757600080fd5b80633a481821116101a25780633a481821146102255780634733dc8f146102385780635c6d9f0c1461024b5780635cf1b24a1461025e57600080fd5b806308aaf6b0146101c95780632f52a2fd146101ef5780632fad7efc14610202575b600080fd5b6101dc6101d7366004611883565b6104b9565b6040519081526020015b60405180910390f35b6101dc6101fd3660046119c6565b610539565b610215610210366004611a45565b6105a4565b60405190151581526020016101e6565b6101dc610233366004611c9e565b61077f565b610215610246366004611cd2565b6107f6565b610215610259366004611a45565b6108f1565b6101dc61026c366004611d0e565b610907565b6101dc61027f366004611dcb565b610964565b6101dc610292366004611dff565b6109b4565b6101dc6102a5366004611e33565b610a11565b6102b2610a62565b005b6101dc6102c2366004611dcb565b610a76565b6101dc6102d5366004611e4f565b610ab4565b6101dc6102e8366004611e83565b610b1c565b6101dc6102fb366004611eb7565b6001600160a01b0391909116600090815260208181526040808320938352929052205490565b61033461032f366004611dff565b610b84565b6040516001600160a01b0390911681526020016101e6565b6001546001600160a01b0316610334565b6101dc61036b3660046119c6565b610bae565b6101dc61037e366004611ee1565b610bdb565b6101dc610391366004611f15565b610c47565b6102156103a4366004611dff565b610c8f565b6103346103b7366004611f98565b610cb4565b6101dc6103ca366004611fcc565b8351602094850120835193850193909320604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f8188015280820195909552606085019190915260808401929092526001600160a01b031660a0808401919091528151808403909101815260c09092019052805191012090565b6101dc7f000000000000000000000000000000000000000000000000000000000000000081565b6102b261047b366004612049565b610cd6565b6102b261048e3660046120bc565b610db4565b6102b26104a13660046120d7565b610e2d565b6103346104b4366004612118565b610ee7565b6000807f80ad7e1b04ee6d994a125f4714ca0720908bd80ed16063ec8aee4b88e9253e2d836000015184602001518051906020012060405160200161051a939291909283526001600160a01b03919091166020830152604082015260600190565b60408051601f1981840301815291905280516020909101209392505050565b6000807f409f5114779a253e700d775d7845e6efc1e83685ac59868d2df3d4de51c7d621836000015184602001516105748660400151610b1c565b6040805160208101959095526001600160a01b03909316928401929092526060830152608082015260a00161051a565b6000805b8281101561077857368484838181106105c3576105c361214d565b90506020028101906105d59190612163565b905060005b6105e48280612183565b6105ee9080612199565b90508110156106e95760006106038380612183565b61060d9080612199565b8381811061061d5761061d61214d565b905060200281019061062f9190612163565b610638906121e2565b905060005b8160200151518110156106d457610670826020015182815181106106635761066361214d565b6020026020010151610c8f565b156106c25760405162461bcd60e51b815260206004820152601f60248201527f45524332304d616e616765723a7265766f6b65642d64656c65676174696f6e0060448201526064015b60405180910390fd5b806106cc81612204565b91505061063d565b505080806106e190612204565b9150506105da565b5060006106f86103b78361221d565b9050610744818787868181106107105761071061214d565b90506020028101906107229190612163565b61072c9080612183565b60200180360381019061073f9190611e33565b610f07565b6107616107518380612183565b61075b9080612199565b83610fc1565b93505050808061077090612204565b9150506105a8565b5092915050565b6000606060005b83518110156107e757816107b28583815181106107a5576107a561214d565b6020026020010151610907565b6040516020016107c3929190612259565b604051602081830303815290604052915080806107df90612204565b915050610786565b50805160209091012092915050565b60003330146108595760405162461bcd60e51b815260206004820152602960248201527f45524332304d616e616765723a7472616e7366657250726f78792d6e6f742d616044820152681d5d1a1bdc9a5e995960ba1b60648201526084016106b9565b836001600160a01b03166323b872dd6108706113d5565b6040516001600160e01b031960e084901b1681526001600160a01b0391821660048201529086166024820152604481018590526064016020604051808303816000875af11580156108c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e9919061227b565b949350505050565b60006108fe838333610fc1565b90505b92915050565b6000807fd97dd99b404d177890f06a8f0fc8e5ed0333fb2ebb6684360709066e8984f5946109388460000151610bdb565b6109458560200151610ab4565b604080516020810194909452830191909152606082015260800161051a565b6000807f000000000000000000000000000000000000000000000000000000000000000061099184610a76565b60405161190160f01b60208201526022810192909252604282015260620161051a565b6000807f3c36a06e1d288b0f94f565588317a46ad11bc3c96992109f9a2365a2737259a76109e58460000151610539565b60208086015180519082012060405161051a949392019283526020830191909152604082015260600190565b6000807fe8d3d963b33868fb116316bc3fd55e8f49123f30e4418f71e140d54b7cd3b2b98360000151846020015160405160200161051a939291909283526020830191909152604082015260600190565b610a6a611431565b610a7460006114aa565b565b6000807f08c69a206c06f5334b35ceb1186181a713b21aff02cf66285f375084fbef2eb8610aa7846000015161077f565b6109458560200151610a11565b6000606060005b83518110156107e75781610ae7858381518110610ada57610ada61214d565b60200260200101516109b4565b604051602001610af8929190612259565b60405160208183030381529060405291508080610b1490612204565b915050610abb565b6000606060005b83518110156107e75781610b4f858381518110610b4257610b4261214d565b60200260200101516104b9565b604051602001610b60929190612259565b60405160208183030381529060405291508080610b7c90612204565b915050610b23565b805160009081610b9382610bae565b90506000610ba58286602001516114fc565b95945050505050565b6000807f000000000000000000000000000000000000000000000000000000000000000061099184610539565b6000807fb16dfdb3b8fa033fe30ac976cd4a50ad256b6811c80d90fcd0b323eec190047d8360000151846020015185604001518051906020012060405160200161051a94939291909384526001600160a01b039290921660208401526040830152606082015260800190565b600081610c5384610539565b60405161190160f01b60208201526022810192909252604282015260620160405160208183030381529060405280519060200120905092915050565b600080610c9b836109b4565b60009081526002602052604090205460ff169392505050565b600080610cc48360000151610964565b905060006108e98285602001516114fc565b333014610d255760405162461bcd60e51b815260206004820152601b60248201527f45524332304d616e616765723a696e76616c69642d73656e646572000000000060448201526064016106b9565b60405163d505accf60e01b81526001600160a01b038781166004830152306024830152604482018790526064820186905260ff8516608483015260a4820184905260c4820183905288169063d505accf9060e401600060405180830381600087803b158015610d9357600080fd5b505af1158015610da7573d6000803e3d6000fd5b5050505050505050505050565b610dbc611431565b6001600160a01b038116610e215760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106b9565b610e2a816114aa565b50565b6000610e61610e3b8361229d565b7f0000000000000000000000000000000000000000000000000000000000000000610ee7565b9050336001600160a01b03821614610ebb5760405162461bcd60e51b815260206004820181905260248201527f45524332304d616e616765723a756e617574686f72697a65642d7265766f6b6560448201526064016106b9565b6000610ec96102928461229d565b6000908152600260205260409020805460ff19166001179055505050565b815160009081610ef78285610c47565b9050610ba58186602001516114fc565b60208082015182516001600160a01b038516600090815280845260408082208483529094529290922054909190610f3f9060016122a9565b8114610f995760405162461bcd60e51b815260206004820152602360248201527f44656c6567617461626c65436f72653a6e6f6e6365322d6f75742d6f662d6f726044820152623232b960e91b60648201526084016106b9565b6001600160a01b03909316600090815260208181526040808320938352929052209190915550565b6000805b838110156113cd576000858583818110610fe157610fe161214d565b9050602002810190610ff39190612163565b610ffc906121e2565b90506000808260200151516000036110145750849050805b6000805b8460200151518110156112af5760008560200151828151811061103d5761103d61214d565b60200260200101519050600061105282610b84565b905082600003611063578095508594505b846001600160a01b0316816001600160a01b0316146110d65760405162461bcd60e51b815260206004820152602960248201527f44656c6567617461626c65436f72653a696e76616c69642d64656c656761746960448201526837b716b9b4b3b732b960b91b60648201526084016106b9565b8151602081015185146111455760405162461bcd60e51b815260206004820152603160248201527f44656c6567617461626c65436f72653a696e76616c69642d617574686f726974604482015270792d64656c65676174696f6e2d6c696e6b60781b60648201526084016106b9565b6000611150846109b4565b905060005b8260400151518161ffff16101561129257600083604001518261ffff16815181106111825761118261214d565b60200260200101516000015190506000816001600160a01b0316635068de4c86604001518561ffff16815181106111bb576111bb61214d565b6020026020010151602001518e60000151876040518463ffffffff1660e01b81526004016111eb939291906122ed565b6020604051808303816000875af115801561120a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122e919061227b565b90508061127d5760405162461bcd60e51b815260206004820152601f60248201527f44656c6567617461626c65436f72653a6361766561742d72656a65637465640060448201526064016106b9565b5050808061128a90612349565b915050611155565b509051955093508291506112a7905081612204565b915050611018565b50866001600160a01b0316826001600160a01b0316146113115760405162461bcd60e51b815260206004820181905260248201527f44656c6567617461626c65436f72653a696e76616c69642d64656c656761746560448201526064016106b9565b835180516001600160a01b0316301461137e5760405162461bcd60e51b815260206004820152602960248201527f44656c6567617461626c65436f72653a696e76616c69642d696e766f636174696044820152681bdb8b5d185c99d95d60ba1b60648201526084016106b9565b611396816000015182604001518360200151876115d3565b9650866113b55760405162461bcd60e51b81526004016106b99061236a565b505050505080806113c590612204565b915050610fc5565b509392505050565b600030330361142b57600080368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b0316915061142e9050565b50335b90565b6114396113d5565b6001600160a01b03166114546001546001600160a01b031690565b6001600160a01b031614610a745760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106b9565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008060008084516041146115175760009350505050610901565b50505060208201516040830151606084015160001a601b81101561154357611540601b826123ab565b90505b8060ff16601b1415801561155b57508060ff16601c14155b1561156c5760009350505050610901565b60408051600081526020810180835288905260ff831691810191909152606081018490526080810183905260019060a0016020604051602081039080840390855afa1580156115bf573d6000803e3d6000fd5b505050602060405103519350505050610901565b60008084836040516020016115e99291906123d0565b60405160208183030381529060405290506060866001600160a01b031685836040516116159190612407565b60006040518083038160008787f1925050503d8060008114611653576040519150601f19603f3d011682016040523d82523d6000602084013e611658565b606091505b509093509050826116a957805115611691576000611675826116b3565b90508060405162461bcd60e51b81526004016106b99190612419565b60405162461bcd60e51b81526004016106b99061236a565b5050949350505050565b805160609060448110156116d7575050604080516020810190915260008152919050565b6004830180516003198301825290936116f9908381016020019060240161242c565b93525090919050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b038111828210171561173a5761173a611702565b60405290565b604051606081016001600160401b038111828210171561173a5761173a611702565b604051601f8201601f191681016001600160401b038111828210171561178a5761178a611702565b604052919050565b80356001600160a01b03811681146117a957600080fd5b919050565b60006001600160401b038211156117c7576117c7611702565b50601f01601f191660200190565b600082601f8301126117e657600080fd5b81356117f96117f4826117ae565b611762565b81815284602083860101111561180e57600080fd5b816020850160208301376000918101602001919091529392505050565b60006040828403121561183d57600080fd5b611845611718565b905061185082611792565b815260208201356001600160401b0381111561186b57600080fd5b611877848285016117d5565b60208301525092915050565b60006020828403121561189557600080fd5b81356001600160401b038111156118ab57600080fd5b6108e98482850161182b565b60006001600160401b038211156118d0576118d0611702565b5060051b60200190565b600082601f8301126118eb57600080fd5b813560206118fb6117f4836118b7565b82815260059290921b8401810191818101908684111561191a57600080fd5b8286015b848110156119595780356001600160401b0381111561193d5760008081fd5b61194b8986838b010161182b565b84525091830191830161191e565b509695505050505050565b60006060828403121561197657600080fd5b61197e611740565b905061198982611792565b81526020820135602082015260408201356001600160401b038111156119ae57600080fd5b6119ba848285016118da565b60408301525092915050565b6000602082840312156119d857600080fd5b81356001600160401b038111156119ee57600080fd5b6108e984828501611964565b60008083601f840112611a0c57600080fd5b5081356001600160401b03811115611a2357600080fd5b6020830191508360208260051b8501011115611a3e57600080fd5b9250929050565b60008060208385031215611a5857600080fd5b82356001600160401b03811115611a6e57600080fd5b611a7a858286016119fa565b90969095509350505050565b600060608284031215611a9857600080fd5b611aa0611740565b9050611aab82611792565b81526020820135602082015260408201356001600160401b03811115611ad057600080fd5b6119ba848285016117d5565b600060408284031215611aee57600080fd5b611af6611718565b905081356001600160401b0380821115611b0f57600080fd5b611b1b85838601611964565b83526020840135915080821115611b3157600080fd5b50611877848285016117d5565b600082601f830112611b4f57600080fd5b81356020611b5f6117f4836118b7565b82815260059290921b84018101918181019086841115611b7e57600080fd5b8286015b848110156119595780356001600160401b03811115611ba15760008081fd5b611baf8986838b0101611adc565b845250918301918301611b82565b600060408284031215611bcf57600080fd5b611bd7611718565b905081356001600160401b0380821115611bf057600080fd5b611bfc85838601611a86565b83526020840135915080821115611c1257600080fd5b5061187784828501611b3e565b600082601f830112611c3057600080fd5b81356020611c406117f4836118b7565b82815260059290921b84018101918181019086841115611c5f57600080fd5b8286015b848110156119595780356001600160401b03811115611c825760008081fd5b611c908986838b0101611bbd565b845250918301918301611c63565b600060208284031215611cb057600080fd5b81356001600160401b03811115611cc657600080fd5b6108e984828501611c1f565b600080600060608486031215611ce757600080fd5b611cf084611792565b9250611cfe60208501611792565b9150604084013590509250925092565b600060208284031215611d2057600080fd5b81356001600160401b03811115611d3657600080fd5b6108e984828501611bbd565b600060408284031215611d5457600080fd5b611d5c611718565b9050813581526020820135602082015292915050565b600060608284031215611d8457600080fd5b611d8c611718565b905081356001600160401b03811115611da457600080fd5b611db084828501611c1f565b825250611dc08360208401611d42565b602082015292915050565b600060208284031215611ddd57600080fd5b81356001600160401b03811115611df357600080fd5b6108e984828501611d72565b600060208284031215611e1157600080fd5b81356001600160401b03811115611e2757600080fd5b6108e984828501611adc565b600060408284031215611e4557600080fd5b6108fe8383611d42565b600060208284031215611e6157600080fd5b81356001600160401b03811115611e7757600080fd5b6108e984828501611b3e565b600060208284031215611e9557600080fd5b81356001600160401b03811115611eab57600080fd5b6108e9848285016118da565b60008060408385031215611eca57600080fd5b611ed383611792565b946020939093013593505050565b600060208284031215611ef357600080fd5b81356001600160401b03811115611f0957600080fd5b6108e984828501611a86565b60008060408385031215611f2857600080fd5b82356001600160401b03811115611f3e57600080fd5b611f4a85828601611964565b95602094909401359450505050565b600060408284031215611f6b57600080fd5b611f73611718565b905081356001600160401b0380821115611f8c57600080fd5b611b1b85838601611d72565b600060208284031215611faa57600080fd5b81356001600160401b03811115611fc057600080fd5b6108e984828501611f59565b60008060008060808587031215611fe257600080fd5b84356001600160401b0380821115611ff957600080fd5b612005888389016117d5565b9550602087013591508082111561201b57600080fd5b50612028878288016117d5565b9350506040850135915061203e60608601611792565b905092959194509250565b600080600080600080600060e0888a03121561206457600080fd5b61206d88611792565b965061207b60208901611792565b95506040880135945060608801359350608088013560ff8116811461209f57600080fd5b9699959850939692959460a0840135945060c09093013592915050565b6000602082840312156120ce57600080fd5b6108fe82611792565b6000602082840312156120e957600080fd5b81356001600160401b038111156120ff57600080fd5b82016040818503121561211157600080fd5b9392505050565b6000806040838503121561212b57600080fd5b82356001600160401b0381111561214157600080fd5b611f4a85828601611adc565b634e487b7160e01b600052603260045260246000fd5b60008235603e1983360301811261217957600080fd5b9190910192915050565b60008235605e1983360301811261217957600080fd5b6000808335601e198436030181126121b057600080fd5b8301803591506001600160401b038211156121ca57600080fd5b6020019150600581901b3603821315611a3e57600080fd5b60006109013683611bbd565b634e487b7160e01b600052601160045260246000fd5b600060018201612216576122166121ee565b5060010190565b60006109013683611f59565b60005b8381101561224457818101518382015260200161222c565b83811115612253576000848401525b50505050565b6000835161226b818460208801612229565b9190910191825250602001919050565b60006020828403121561228d57600080fd5b8151801515811461211157600080fd5b60006109013683611adc565b600082198211156122bc576122bc6121ee565b500190565b600081518084526122d9816020860160208601612229565b601f01601f19169290920160200192915050565b60608152600061230060608301866122c1565b828103602084015260018060a01b0385511681526020850151602082015260408501516060604083015261233760608301826122c1565b92505050826040830152949350505050565b600061ffff808316818103612360576123606121ee565b6001019392505050565b60208082526021908201527f44656c6567617461626c65436f72653a3a657865637574696f6e2d6661696c656040820152601960fa1b606082015260800190565b600060ff821660ff84168060ff038211156123c8576123c86121ee565b019392505050565b600083516123e2818460208801612229565b60609390931b6bffffffffffffffffffffffff19169190920190815260140192915050565b60008251612179818460208701612229565b6020815260006108fe60208301846122c1565b60006020828403121561243e57600080fd5b81516001600160401b0381111561245457600080fd5b8201601f8101841361246557600080fd5b80516124736117f4826117ae565b81815285602083850101111561248857600080fd5b610ba582602083016020860161222956fea26469706673582212200ef9e3b4b6685790160e2b50b09af0b5c167206f071f286730c7c16b9012512864736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101c45760003560e01c806389535803116100f9578063caced6c511610097578063e33150db11610071578063e33150db1461046d578063f2fde38b14610480578063f6037c9614610493578063fb8ad30d146104a657600080fd5b8063caced6c5146103a9578063d327c1eb146103bc578063dfe86ac51461044657600080fd5b806397182ed6116100d357806397182ed61461035d578063a2e01f7514610370578063a58ab45c14610383578063c57cbe4b1461039657600080fd5b806389535803146102ed5780638a04499e146103215780638da5cb5b1461034c57600080fd5b806360b6d76811610166578063715018a611610140578063715018a6146102aa5780637234eefe146102b4578063736f7ce7146102c75780637b577b58146102da57600080fd5b806360b6d768146102715780636c2b1253146102845780636f9658031461029757600080fd5b80633a481821116101a25780633a481821146102255780634733dc8f146102385780635c6d9f0c1461024b5780635cf1b24a1461025e57600080fd5b806308aaf6b0146101c95780632f52a2fd146101ef5780632fad7efc14610202575b600080fd5b6101dc6101d7366004611883565b6104b9565b6040519081526020015b60405180910390f35b6101dc6101fd3660046119c6565b610539565b610215610210366004611a45565b6105a4565b60405190151581526020016101e6565b6101dc610233366004611c9e565b61077f565b610215610246366004611cd2565b6107f6565b610215610259366004611a45565b6108f1565b6101dc61026c366004611d0e565b610907565b6101dc61027f366004611dcb565b610964565b6101dc610292366004611dff565b6109b4565b6101dc6102a5366004611e33565b610a11565b6102b2610a62565b005b6101dc6102c2366004611dcb565b610a76565b6101dc6102d5366004611e4f565b610ab4565b6101dc6102e8366004611e83565b610b1c565b6101dc6102fb366004611eb7565b6001600160a01b0391909116600090815260208181526040808320938352929052205490565b61033461032f366004611dff565b610b84565b6040516001600160a01b0390911681526020016101e6565b6001546001600160a01b0316610334565b6101dc61036b3660046119c6565b610bae565b6101dc61037e366004611ee1565b610bdb565b6101dc610391366004611f15565b610c47565b6102156103a4366004611dff565b610c8f565b6103346103b7366004611f98565b610cb4565b6101dc6103ca366004611fcc565b8351602094850120835193850193909320604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f8188015280820195909552606085019190915260808401929092526001600160a01b031660a0808401919091528151808403909101815260c09092019052805191012090565b6101dc7f000000000000000000000000000000000000000000000000000000000000000081565b6102b261047b366004612049565b610cd6565b6102b261048e3660046120bc565b610db4565b6102b26104a13660046120d7565b610e2d565b6103346104b4366004612118565b610ee7565b6000807f80ad7e1b04ee6d994a125f4714ca0720908bd80ed16063ec8aee4b88e9253e2d836000015184602001518051906020012060405160200161051a939291909283526001600160a01b03919091166020830152604082015260600190565b60408051601f1981840301815291905280516020909101209392505050565b6000807f409f5114779a253e700d775d7845e6efc1e83685ac59868d2df3d4de51c7d621836000015184602001516105748660400151610b1c565b6040805160208101959095526001600160a01b03909316928401929092526060830152608082015260a00161051a565b6000805b8281101561077857368484838181106105c3576105c361214d565b90506020028101906105d59190612163565b905060005b6105e48280612183565b6105ee9080612199565b90508110156106e95760006106038380612183565b61060d9080612199565b8381811061061d5761061d61214d565b905060200281019061062f9190612163565b610638906121e2565b905060005b8160200151518110156106d457610670826020015182815181106106635761066361214d565b6020026020010151610c8f565b156106c25760405162461bcd60e51b815260206004820152601f60248201527f45524332304d616e616765723a7265766f6b65642d64656c65676174696f6e0060448201526064015b60405180910390fd5b806106cc81612204565b91505061063d565b505080806106e190612204565b9150506105da565b5060006106f86103b78361221d565b9050610744818787868181106107105761071061214d565b90506020028101906107229190612163565b61072c9080612183565b60200180360381019061073f9190611e33565b610f07565b6107616107518380612183565b61075b9080612199565b83610fc1565b93505050808061077090612204565b9150506105a8565b5092915050565b6000606060005b83518110156107e757816107b28583815181106107a5576107a561214d565b6020026020010151610907565b6040516020016107c3929190612259565b604051602081830303815290604052915080806107df90612204565b915050610786565b50805160209091012092915050565b60003330146108595760405162461bcd60e51b815260206004820152602960248201527f45524332304d616e616765723a7472616e7366657250726f78792d6e6f742d616044820152681d5d1a1bdc9a5e995960ba1b60648201526084016106b9565b836001600160a01b03166323b872dd6108706113d5565b6040516001600160e01b031960e084901b1681526001600160a01b0391821660048201529086166024820152604481018590526064016020604051808303816000875af11580156108c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e9919061227b565b949350505050565b60006108fe838333610fc1565b90505b92915050565b6000807fd97dd99b404d177890f06a8f0fc8e5ed0333fb2ebb6684360709066e8984f5946109388460000151610bdb565b6109458560200151610ab4565b604080516020810194909452830191909152606082015260800161051a565b6000807f000000000000000000000000000000000000000000000000000000000000000061099184610a76565b60405161190160f01b60208201526022810192909252604282015260620161051a565b6000807f3c36a06e1d288b0f94f565588317a46ad11bc3c96992109f9a2365a2737259a76109e58460000151610539565b60208086015180519082012060405161051a949392019283526020830191909152604082015260600190565b6000807fe8d3d963b33868fb116316bc3fd55e8f49123f30e4418f71e140d54b7cd3b2b98360000151846020015160405160200161051a939291909283526020830191909152604082015260600190565b610a6a611431565b610a7460006114aa565b565b6000807f08c69a206c06f5334b35ceb1186181a713b21aff02cf66285f375084fbef2eb8610aa7846000015161077f565b6109458560200151610a11565b6000606060005b83518110156107e75781610ae7858381518110610ada57610ada61214d565b60200260200101516109b4565b604051602001610af8929190612259565b60405160208183030381529060405291508080610b1490612204565b915050610abb565b6000606060005b83518110156107e75781610b4f858381518110610b4257610b4261214d565b60200260200101516104b9565b604051602001610b60929190612259565b60405160208183030381529060405291508080610b7c90612204565b915050610b23565b805160009081610b9382610bae565b90506000610ba58286602001516114fc565b95945050505050565b6000807f000000000000000000000000000000000000000000000000000000000000000061099184610539565b6000807fb16dfdb3b8fa033fe30ac976cd4a50ad256b6811c80d90fcd0b323eec190047d8360000151846020015185604001518051906020012060405160200161051a94939291909384526001600160a01b039290921660208401526040830152606082015260800190565b600081610c5384610539565b60405161190160f01b60208201526022810192909252604282015260620160405160208183030381529060405280519060200120905092915050565b600080610c9b836109b4565b60009081526002602052604090205460ff169392505050565b600080610cc48360000151610964565b905060006108e98285602001516114fc565b333014610d255760405162461bcd60e51b815260206004820152601b60248201527f45524332304d616e616765723a696e76616c69642d73656e646572000000000060448201526064016106b9565b60405163d505accf60e01b81526001600160a01b038781166004830152306024830152604482018790526064820186905260ff8516608483015260a4820184905260c4820183905288169063d505accf9060e401600060405180830381600087803b158015610d9357600080fd5b505af1158015610da7573d6000803e3d6000fd5b5050505050505050505050565b610dbc611431565b6001600160a01b038116610e215760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106b9565b610e2a816114aa565b50565b6000610e61610e3b8361229d565b7f0000000000000000000000000000000000000000000000000000000000000000610ee7565b9050336001600160a01b03821614610ebb5760405162461bcd60e51b815260206004820181905260248201527f45524332304d616e616765723a756e617574686f72697a65642d7265766f6b6560448201526064016106b9565b6000610ec96102928461229d565b6000908152600260205260409020805460ff19166001179055505050565b815160009081610ef78285610c47565b9050610ba58186602001516114fc565b60208082015182516001600160a01b038516600090815280845260408082208483529094529290922054909190610f3f9060016122a9565b8114610f995760405162461bcd60e51b815260206004820152602360248201527f44656c6567617461626c65436f72653a6e6f6e6365322d6f75742d6f662d6f726044820152623232b960e91b60648201526084016106b9565b6001600160a01b03909316600090815260208181526040808320938352929052209190915550565b6000805b838110156113cd576000858583818110610fe157610fe161214d565b9050602002810190610ff39190612163565b610ffc906121e2565b90506000808260200151516000036110145750849050805b6000805b8460200151518110156112af5760008560200151828151811061103d5761103d61214d565b60200260200101519050600061105282610b84565b905082600003611063578095508594505b846001600160a01b0316816001600160a01b0316146110d65760405162461bcd60e51b815260206004820152602960248201527f44656c6567617461626c65436f72653a696e76616c69642d64656c656761746960448201526837b716b9b4b3b732b960b91b60648201526084016106b9565b8151602081015185146111455760405162461bcd60e51b815260206004820152603160248201527f44656c6567617461626c65436f72653a696e76616c69642d617574686f726974604482015270792d64656c65676174696f6e2d6c696e6b60781b60648201526084016106b9565b6000611150846109b4565b905060005b8260400151518161ffff16101561129257600083604001518261ffff16815181106111825761118261214d565b60200260200101516000015190506000816001600160a01b0316635068de4c86604001518561ffff16815181106111bb576111bb61214d565b6020026020010151602001518e60000151876040518463ffffffff1660e01b81526004016111eb939291906122ed565b6020604051808303816000875af115801561120a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122e919061227b565b90508061127d5760405162461bcd60e51b815260206004820152601f60248201527f44656c6567617461626c65436f72653a6361766561742d72656a65637465640060448201526064016106b9565b5050808061128a90612349565b915050611155565b509051955093508291506112a7905081612204565b915050611018565b50866001600160a01b0316826001600160a01b0316146113115760405162461bcd60e51b815260206004820181905260248201527f44656c6567617461626c65436f72653a696e76616c69642d64656c656761746560448201526064016106b9565b835180516001600160a01b0316301461137e5760405162461bcd60e51b815260206004820152602960248201527f44656c6567617461626c65436f72653a696e76616c69642d696e766f636174696044820152681bdb8b5d185c99d95d60ba1b60648201526084016106b9565b611396816000015182604001518360200151876115d3565b9650866113b55760405162461bcd60e51b81526004016106b99061236a565b505050505080806113c590612204565b915050610fc5565b509392505050565b600030330361142b57600080368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b0316915061142e9050565b50335b90565b6114396113d5565b6001600160a01b03166114546001546001600160a01b031690565b6001600160a01b031614610a745760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106b9565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008060008084516041146115175760009350505050610901565b50505060208201516040830151606084015160001a601b81101561154357611540601b826123ab565b90505b8060ff16601b1415801561155b57508060ff16601c14155b1561156c5760009350505050610901565b60408051600081526020810180835288905260ff831691810191909152606081018490526080810183905260019060a0016020604051602081039080840390855afa1580156115bf573d6000803e3d6000fd5b505050602060405103519350505050610901565b60008084836040516020016115e99291906123d0565b60405160208183030381529060405290506060866001600160a01b031685836040516116159190612407565b60006040518083038160008787f1925050503d8060008114611653576040519150601f19603f3d011682016040523d82523d6000602084013e611658565b606091505b509093509050826116a957805115611691576000611675826116b3565b90508060405162461bcd60e51b81526004016106b99190612419565b60405162461bcd60e51b81526004016106b99061236a565b5050949350505050565b805160609060448110156116d7575050604080516020810190915260008152919050565b6004830180516003198301825290936116f9908381016020019060240161242c565b93525090919050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b038111828210171561173a5761173a611702565b60405290565b604051606081016001600160401b038111828210171561173a5761173a611702565b604051601f8201601f191681016001600160401b038111828210171561178a5761178a611702565b604052919050565b80356001600160a01b03811681146117a957600080fd5b919050565b60006001600160401b038211156117c7576117c7611702565b50601f01601f191660200190565b600082601f8301126117e657600080fd5b81356117f96117f4826117ae565b611762565b81815284602083860101111561180e57600080fd5b816020850160208301376000918101602001919091529392505050565b60006040828403121561183d57600080fd5b611845611718565b905061185082611792565b815260208201356001600160401b0381111561186b57600080fd5b611877848285016117d5565b60208301525092915050565b60006020828403121561189557600080fd5b81356001600160401b038111156118ab57600080fd5b6108e98482850161182b565b60006001600160401b038211156118d0576118d0611702565b5060051b60200190565b600082601f8301126118eb57600080fd5b813560206118fb6117f4836118b7565b82815260059290921b8401810191818101908684111561191a57600080fd5b8286015b848110156119595780356001600160401b0381111561193d5760008081fd5b61194b8986838b010161182b565b84525091830191830161191e565b509695505050505050565b60006060828403121561197657600080fd5b61197e611740565b905061198982611792565b81526020820135602082015260408201356001600160401b038111156119ae57600080fd5b6119ba848285016118da565b60408301525092915050565b6000602082840312156119d857600080fd5b81356001600160401b038111156119ee57600080fd5b6108e984828501611964565b60008083601f840112611a0c57600080fd5b5081356001600160401b03811115611a2357600080fd5b6020830191508360208260051b8501011115611a3e57600080fd5b9250929050565b60008060208385031215611a5857600080fd5b82356001600160401b03811115611a6e57600080fd5b611a7a858286016119fa565b90969095509350505050565b600060608284031215611a9857600080fd5b611aa0611740565b9050611aab82611792565b81526020820135602082015260408201356001600160401b03811115611ad057600080fd5b6119ba848285016117d5565b600060408284031215611aee57600080fd5b611af6611718565b905081356001600160401b0380821115611b0f57600080fd5b611b1b85838601611964565b83526020840135915080821115611b3157600080fd5b50611877848285016117d5565b600082601f830112611b4f57600080fd5b81356020611b5f6117f4836118b7565b82815260059290921b84018101918181019086841115611b7e57600080fd5b8286015b848110156119595780356001600160401b03811115611ba15760008081fd5b611baf8986838b0101611adc565b845250918301918301611b82565b600060408284031215611bcf57600080fd5b611bd7611718565b905081356001600160401b0380821115611bf057600080fd5b611bfc85838601611a86565b83526020840135915080821115611c1257600080fd5b5061187784828501611b3e565b600082601f830112611c3057600080fd5b81356020611c406117f4836118b7565b82815260059290921b84018101918181019086841115611c5f57600080fd5b8286015b848110156119595780356001600160401b03811115611c825760008081fd5b611c908986838b0101611bbd565b845250918301918301611c63565b600060208284031215611cb057600080fd5b81356001600160401b03811115611cc657600080fd5b6108e984828501611c1f565b600080600060608486031215611ce757600080fd5b611cf084611792565b9250611cfe60208501611792565b9150604084013590509250925092565b600060208284031215611d2057600080fd5b81356001600160401b03811115611d3657600080fd5b6108e984828501611bbd565b600060408284031215611d5457600080fd5b611d5c611718565b9050813581526020820135602082015292915050565b600060608284031215611d8457600080fd5b611d8c611718565b905081356001600160401b03811115611da457600080fd5b611db084828501611c1f565b825250611dc08360208401611d42565b602082015292915050565b600060208284031215611ddd57600080fd5b81356001600160401b03811115611df357600080fd5b6108e984828501611d72565b600060208284031215611e1157600080fd5b81356001600160401b03811115611e2757600080fd5b6108e984828501611adc565b600060408284031215611e4557600080fd5b6108fe8383611d42565b600060208284031215611e6157600080fd5b81356001600160401b03811115611e7757600080fd5b6108e984828501611b3e565b600060208284031215611e9557600080fd5b81356001600160401b03811115611eab57600080fd5b6108e9848285016118da565b60008060408385031215611eca57600080fd5b611ed383611792565b946020939093013593505050565b600060208284031215611ef357600080fd5b81356001600160401b03811115611f0957600080fd5b6108e984828501611a86565b60008060408385031215611f2857600080fd5b82356001600160401b03811115611f3e57600080fd5b611f4a85828601611964565b95602094909401359450505050565b600060408284031215611f6b57600080fd5b611f73611718565b905081356001600160401b0380821115611f8c57600080fd5b611b1b85838601611d72565b600060208284031215611faa57600080fd5b81356001600160401b03811115611fc057600080fd5b6108e984828501611f59565b60008060008060808587031215611fe257600080fd5b84356001600160401b0380821115611ff957600080fd5b612005888389016117d5565b9550602087013591508082111561201b57600080fd5b50612028878288016117d5565b9350506040850135915061203e60608601611792565b905092959194509250565b600080600080600080600060e0888a03121561206457600080fd5b61206d88611792565b965061207b60208901611792565b95506040880135945060608801359350608088013560ff8116811461209f57600080fd5b9699959850939692959460a0840135945060c09093013592915050565b6000602082840312156120ce57600080fd5b6108fe82611792565b6000602082840312156120e957600080fd5b81356001600160401b038111156120ff57600080fd5b82016040818503121561211157600080fd5b9392505050565b6000806040838503121561212b57600080fd5b82356001600160401b0381111561214157600080fd5b611f4a85828601611adc565b634e487b7160e01b600052603260045260246000fd5b60008235603e1983360301811261217957600080fd5b9190910192915050565b60008235605e1983360301811261217957600080fd5b6000808335601e198436030181126121b057600080fd5b8301803591506001600160401b038211156121ca57600080fd5b6020019150600581901b3603821315611a3e57600080fd5b60006109013683611bbd565b634e487b7160e01b600052601160045260246000fd5b600060018201612216576122166121ee565b5060010190565b60006109013683611f59565b60005b8381101561224457818101518382015260200161222c565b83811115612253576000848401525b50505050565b6000835161226b818460208801612229565b9190910191825250602001919050565b60006020828403121561228d57600080fd5b8151801515811461211157600080fd5b60006109013683611adc565b600082198211156122bc576122bc6121ee565b500190565b600081518084526122d9816020860160208601612229565b601f01601f19169290920160200192915050565b60608152600061230060608301866122c1565b828103602084015260018060a01b0385511681526020850151602082015260408501516060604083015261233760608301826122c1565b92505050826040830152949350505050565b600061ffff808316818103612360576123606121ee565b6001019392505050565b60208082526021908201527f44656c6567617461626c65436f72653a3a657865637574696f6e2d6661696c656040820152601960fa1b606082015260800190565b600060ff821660ff84168060ff038211156123c8576123c86121ee565b019392505050565b600083516123e2818460208801612229565b60609390931b6bffffffffffffffffffffffff19169190920190815260140192915050565b60008251612179818460208701612229565b6020815260006108fe60208301846122c1565b60006020828403121561243e57600080fd5b81516001600160401b0381111561245457600080fd5b8201601f8101841361246557600080fd5b80516124736117f4826117ae565b81815285602083850101111561248857600080fd5b610ba582602083016020860161222956fea26469706673582212200ef9e3b4b6685790160e2b50b09af0b5c167206f071f286730c7c16b9012512864736f6c634300080f0033",
  "devdoc": {
    "author": "McOso",
    "kind": "dev",
    "methods": {
      "contractInvoke(((address,uint256,bytes),((address,bytes32,(address,bytes)[]),bytes)[])[])": {
        "params": {
          "batch": "Invocation[] - The batch of invocations to process."
        },
        "returns": {
          "_0": "success bool - Whether the batch of invocations was successfully processed."
        }
      },
      "getDelegationTypedDataHash((address,bytes32,(address,bytes)[]))": {
        "params": {
          "delegation": "Delegation - The delegation to get the type of"
        },
        "returns": {
          "_0": "bytes32 - The type of the delegation"
        }
      },
      "getInvocationsTypedDataHash((((address,uint256,bytes),((address,bytes32,(address,bytes)[]),bytes)[])[],(uint256,uint256)))": {
        "params": {
          "invocations": "Invocations"
        },
        "returns": {
          "_0": "bytes32 - The type of the Invocations"
        }
      },
      "invoke(((((address,uint256,bytes),((address,bytes32,(address,bytes)[]),bytes)[])[],(uint256,uint256)),bytes)[])": {
        "params": {
          "signedInvocations": "SignedInvocation[] - The batch of signed invocations to process."
        },
        "returns": {
          "success": "bool - Whether the batch of invocations was successfully processed."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "verifyInvocationSignature(((((address,uint256,bytes),((address,bytes32,(address,bytes)[]),bytes)[])[],(uint256,uint256)),bytes))": {
        "params": {
          "signedInvocation": "- The signed invocation to verify"
        },
        "returns": {
          "_0": "address - The address of the account authorizing this invocation to act on its behalf."
        }
      }
    },
    "title": "ERC20Manager",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "contractInvoke(((address,uint256,bytes),((address,bytes32,(address,bytes)[]),bytes)[])[])": {
        "notice": "Allows a smart contract to submit a batch of invocations for processing, allowing itself to be the delegate."
      },
      "domainHash()": {
        "notice": "The hash of the domain separator used in the EIP712 domain hash."
      },
      "getDelegationTypedDataHash((address,bytes32,(address,bytes)[]))": {
        "notice": "Returns the typehash for this contract's delegation signatures."
      },
      "getInvocationsTypedDataHash((((address,uint256,bytes),((address,bytes32,(address,bytes)[]),bytes)[])[],(uint256,uint256)))": {
        "notice": "Returns the typehash for this contract's invocation signatures."
      },
      "invoke(((((address,uint256,bytes),((address,bytes32,(address,bytes)[]),bytes)[])[],(uint256,uint256)),bytes)[])": {
        "notice": "Allows anyone to submit a batch of signed invocations for processing."
      },
      "verifyInvocationSignature(((((address,uint256,bytes),((address,bytes32,(address,bytes)[]),bytes)[])[],(uint256,uint256)),bytes))": {
        "notice": "Verifies that the given invocation is valid."
      }
    },
    "notice": "Manages the erc20 delegation",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1140,
        "contract": "contracts/ERC20Manager.sol:ERC20Manager",
        "label": "multiNonce",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 609,
        "contract": "contracts/ERC20Manager.sol:ERC20Manager",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1577,
        "contract": "contracts/ERC20Manager.sol:ERC20Manager",
        "label": "revokedMap",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}