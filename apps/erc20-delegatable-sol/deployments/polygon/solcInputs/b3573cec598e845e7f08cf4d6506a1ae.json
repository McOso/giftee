{
  "language": "Solidity",
  "sources": {
    "@delegatable/delegatable-sol/contracts/CaveatEnforcer.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"./TypesAndDecoders.sol\";\n\nabstract contract CaveatEnforcer {\n    function enforceCaveat(\n        bytes calldata terms,\n        Transaction calldata tx,\n        bytes32 delegationHash\n    ) public virtual returns (bool);\n}\n"
    },
    "@delegatable/delegatable-sol/contracts/interfaces/IDelegatable.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"../TypesAndDecoders.sol\";\n\ninterface IDelegatable {\n    /**\n     * @notice Allows a smart contract to submit a batch of invocations for processing, allowing itself to be the delegate.\n     * @param batch Invocation[] - The batch of invocations to process.\n     * @return success bool - Whether the batch of invocations was successfully processed.\n     */\n    function contractInvoke(Invocation[] calldata batch)\n        external\n        returns (bool);\n\n    /**\n     * @notice Allows anyone to submit a batch of signed invocations for processing.\n     * @param signedInvocations SignedInvocation[] - The batch of signed invocations to process.\n     * @return success bool - Whether the batch of invocations was successfully processed.\n     */\n    function invoke(SignedInvocation[] calldata signedInvocations)\n        external\n        returns (bool success);\n\n    /**\n     * @notice Returns the typehash for this contract's delegation signatures.\n     * @param delegation Delegation - The delegation to get the type of\n     * @return bytes32 - The type of the delegation\n     */\n    function getDelegationTypedDataHash(Delegation memory delegation)\n        external\n        view\n        returns (bytes32);\n\n    /**\n     * @notice Returns the typehash for this contract's invocation signatures.\n     * @param invocations Invocations\n     * @return bytes32 - The type of the Invocations\n     */\n    function getInvocationsTypedDataHash(Invocations memory invocations)\n        external\n        view\n        returns (bytes32);\n\n    function getEIP712DomainHash(\n        string memory contractName,\n        string memory version,\n        uint256 chainId,\n        address verifyingContract\n    ) external pure returns (bytes32);\n\n    /**\n     * @notice Verifies that the given invocation is valid.\n     * @param signedInvocation - The signed invocation to verify\n     * @return address - The address of the account authorizing this invocation to act on its behalf.\n     */\n    function verifyInvocationSignature(SignedInvocation memory signedInvocation)\n        external\n        view\n        returns (address);\n\n    /**\n     * @notice Verifies that the given delegation is valid.\n     * @param signedDelegation - The delegation to verify\n     * @return address - The address of the account authorizing this delegation to act on its behalf.\n     */\n    function verifyDelegationSignature(SignedDelegation memory signedDelegation)\n        external\n        view\n        returns (address);\n}\n"
    },
    "@delegatable/delegatable-sol/contracts/libraries/ECRecovery.sol": {
      "content": "pragma solidity 0.8.15;\n\n// SPDX-License-Identifier: MIT\n\ncontract ECRecovery {\n    /**\n     * @dev Recover signer address from a message by using their signature\n     * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\n     * @param sig bytes signature, the signature is generated using web3.eth.sign()\n     */\n    function recover(bytes32 hash, bytes memory sig)\n        internal\n        pure\n        returns (address)\n    {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        //Check the signature length\n        if (sig.length != 65) {\n            return (address(0));\n        }\n\n        // Divide the signature in r, s and v variables\n        assembly {\n            r := mload(add(sig, 32))\n            s := mload(add(sig, 64))\n            v := byte(0, mload(add(sig, 96)))\n        }\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n        if (v < 27) {\n            v += 27;\n        }\n\n        // If the version is correct return the signer address\n        if (v != 27 && v != 28) {\n            return (address(0));\n        } else {\n            return ecrecover(hash, v, r, s);\n        }\n    }\n}\n"
    },
    "@delegatable/delegatable-sol/contracts/TypesAndDecoders.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\nimport \"./libraries/ECRecovery.sol\";\n\n// BEGIN EIP712 AUTOGENERATED SETUP\nstruct EIP712Domain {\n    string name;\n    string version;\n    uint256 chainId;\n    address verifyingContract;\n}\n\nbytes32 constant EIP712DOMAIN_TYPEHASH = keccak256(\n    \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n);\n\nstruct Invocation {\n    Transaction transaction;\n    SignedDelegation[] authority;\n}\n\nbytes32 constant INVOCATION_TYPEHASH = keccak256(\n    \"Invocation(Transaction transaction,SignedDelegation[] authority)Caveat(address enforcer,bytes terms)Delegation(address delegate,bytes32 authority,Caveat[] caveats)SignedDelegation(Delegation delegation,bytes signature)Transaction(address to,uint256 gasLimit,bytes data)\"\n);\n\nstruct Invocations {\n    Invocation[] batch;\n    ReplayProtection replayProtection;\n}\n\nbytes32 constant INVOCATIONS_TYPEHASH = keccak256(\n    \"Invocations(Invocation[] batch,ReplayProtection replayProtection)Caveat(address enforcer,bytes terms)Delegation(address delegate,bytes32 authority,Caveat[] caveats)Invocation(Transaction transaction,SignedDelegation[] authority)ReplayProtection(uint nonce,uint queue)SignedDelegation(Delegation delegation,bytes signature)Transaction(address to,uint256 gasLimit,bytes data)\"\n);\n\nstruct SignedInvocation {\n    Invocations invocations;\n    bytes signature;\n}\n\nbytes32 constant SIGNEDINVOCATION_TYPEHASH = keccak256(\n    \"SignedInvocation(Invocations invocations,bytes signature)Caveat(address enforcer,bytes terms)Delegation(address delegate,bytes32 authority,Caveat[] caveats)Invocation(Transaction transaction,SignedDelegation[] authority)Invocations(Invocation[] batch,ReplayProtection replayProtection)ReplayProtection(uint nonce,uint queue)SignedDelegation(Delegation delegation,bytes signature)Transaction(address to,uint256 gasLimit,bytes data)\"\n);\n\nstruct Transaction {\n    address to;\n    uint256 gasLimit;\n    bytes data;\n}\n\nbytes32 constant TRANSACTION_TYPEHASH = keccak256(\n    \"Transaction(address to,uint256 gasLimit,bytes data)\"\n);\n\nstruct ReplayProtection {\n    uint256 nonce;\n    uint256 queue;\n}\n\nbytes32 constant REPLAYPROTECTION_TYPEHASH = keccak256(\n    \"ReplayProtection(uint nonce,uint queue)\"\n);\n\nstruct Delegation {\n    address delegate;\n    bytes32 authority;\n    Caveat[] caveats;\n}\n\nbytes32 constant DELEGATION_TYPEHASH = keccak256(\n    \"Delegation(address delegate,bytes32 authority,Caveat[] caveats)Caveat(address enforcer,bytes terms)\"\n);\n\nstruct Caveat {\n    address enforcer;\n    bytes terms;\n}\n\nbytes32 constant CAVEAT_TYPEHASH = keccak256(\n    \"Caveat(address enforcer,bytes terms)\"\n);\n\nstruct SignedDelegation {\n    Delegation delegation;\n    bytes signature;\n}\n\nbytes32 constant SIGNEDDELEGATION_TYPEHASH = keccak256(\n    \"SignedDelegation(Delegation delegation,bytes signature)Caveat(address enforcer,bytes terms)Delegation(address delegate,bytes32 authority,Caveat[] caveats)\"\n);\n\n// END EIP712 AUTOGENERATED SETUP\n\ncontract EIP712Decoder is ECRecovery {\n    // BEGIN EIP712 AUTOGENERATED BODY. See scripts/typesToCode.js\n\n    // function GET_EIP712DOMAIN_PACKETHASH(EIP712Domain memory _input)\n    //     public\n    //     pure\n    //     returns (bytes32)\n    // {\n    //     bytes memory encoded = abi.encode(\n    //         EIP712DOMAIN_TYPEHASH,\n    //         _input.name,\n    //         _input.version,\n    //         _input.chainId,\n    //         _input.verifyingContract\n    //     );\n\n    //     return keccak256(encoded);\n    // }\n\n    function GET_INVOCATION_PACKETHASH(Invocation memory _input)\n        public\n        pure\n        returns (bytes32)\n    {\n        bytes memory encoded = abi.encode(\n            INVOCATION_TYPEHASH,\n            GET_TRANSACTION_PACKETHASH(_input.transaction),\n            GET_SIGNEDDELEGATION_ARRAY_PACKETHASH(_input.authority)\n        );\n\n        return keccak256(encoded);\n    }\n\n    function GET_SIGNEDDELEGATION_ARRAY_PACKETHASH(\n        SignedDelegation[] memory _input\n    ) public pure returns (bytes32) {\n        bytes memory encoded;\n        for (uint256 i = 0; i < _input.length; i++) {\n            encoded = bytes.concat(\n                encoded,\n                GET_SIGNEDDELEGATION_PACKETHASH(_input[i])\n            );\n        }\n\n        bytes32 hash = keccak256(encoded);\n        return hash;\n    }\n\n    function GET_INVOCATIONS_PACKETHASH(Invocations memory _input)\n        public\n        pure\n        returns (bytes32)\n    {\n        bytes memory encoded = abi.encode(\n            INVOCATIONS_TYPEHASH,\n            GET_INVOCATION_ARRAY_PACKETHASH(_input.batch),\n            GET_REPLAYPROTECTION_PACKETHASH(_input.replayProtection)\n        );\n\n        return keccak256(encoded);\n    }\n\n    function GET_INVOCATION_ARRAY_PACKETHASH(Invocation[] memory _input)\n        public\n        pure\n        returns (bytes32)\n    {\n        bytes memory encoded;\n        for (uint256 i = 0; i < _input.length; i++) {\n            encoded = bytes.concat(\n                encoded,\n                GET_INVOCATION_PACKETHASH(_input[i])\n            );\n        }\n\n        bytes32 hash = keccak256(encoded);\n        return hash;\n    }\n\n    // function GET_SIGNEDINVOCATION_PACKETHASH(SignedInvocation memory _input)\n    //     public\n    //     pure\n    //     returns (bytes32)\n    // {\n    //     bytes memory encoded = abi.encode(\n    //         SIGNEDINVOCATION_TYPEHASH,\n    //         GET_INVOCATIONS_PACKETHASH(_input.invocations),\n    //         keccak256(_input.signature)\n    //     );\n\n    //     return keccak256(encoded);\n    // }\n\n    function GET_TRANSACTION_PACKETHASH(Transaction memory _input)\n        public\n        pure\n        returns (bytes32)\n    {\n        bytes memory encoded = abi.encode(\n            TRANSACTION_TYPEHASH,\n            _input.to,\n            _input.gasLimit,\n            keccak256(_input.data)\n        );\n\n        return keccak256(encoded);\n    }\n\n    function GET_REPLAYPROTECTION_PACKETHASH(ReplayProtection memory _input)\n        public\n        pure\n        returns (bytes32)\n    {\n        bytes memory encoded = abi.encode(\n            REPLAYPROTECTION_TYPEHASH,\n            _input.nonce,\n            _input.queue\n        );\n\n        return keccak256(encoded);\n    }\n\n    function GET_DELEGATION_PACKETHASH(Delegation memory _input)\n        public\n        pure\n        returns (bytes32)\n    {\n        bytes memory encoded = abi.encode(\n            DELEGATION_TYPEHASH,\n            _input.delegate,\n            _input.authority,\n            GET_CAVEAT_ARRAY_PACKETHASH(_input.caveats)\n        );\n\n        return keccak256(encoded);\n    }\n\n    function GET_CAVEAT_ARRAY_PACKETHASH(Caveat[] memory _input)\n        public\n        pure\n        returns (bytes32)\n    {\n        bytes memory encoded;\n        for (uint256 i = 0; i < _input.length; i++) {\n            encoded = bytes.concat(encoded, GET_CAVEAT_PACKETHASH(_input[i]));\n        }\n\n        bytes32 hash = keccak256(encoded);\n        return hash;\n    }\n\n    function GET_CAVEAT_PACKETHASH(Caveat memory _input)\n        public\n        pure\n        returns (bytes32)\n    {\n        bytes memory encoded = abi.encode(\n            CAVEAT_TYPEHASH,\n            _input.enforcer,\n            keccak256(_input.terms)\n        );\n\n        return keccak256(encoded);\n    }\n\n    function GET_SIGNEDDELEGATION_PACKETHASH(SignedDelegation memory _input)\n        public\n        pure\n        returns (bytes32)\n    {\n        bytes memory encoded = abi.encode(\n            SIGNEDDELEGATION_TYPEHASH,\n            GET_DELEGATION_PACKETHASH(_input.delegation),\n            keccak256(_input.signature)\n        );\n\n        return keccak256(encoded);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/Delegatable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\n// import \"hardhat/console.sol\";\nimport {EIP712DOMAIN_TYPEHASH} from \"@delegatable/delegatable-sol/contracts/TypesAndDecoders.sol\";\nimport {Delegation, Invocation, Invocations, SignedInvocation, SignedDelegation} from \"@delegatable/delegatable-sol/contracts/CaveatEnforcer.sol\";\nimport {DelegatableCore} from \"./DelegatableCore.sol\";\nimport {IDelegatable} from \"@delegatable/delegatable-sol/contracts/interfaces/IDelegatable.sol\";\n\nabstract contract Delegatable is IDelegatable, DelegatableCore {\n    /// @notice The hash of the domain separator used in the EIP712 domain hash.\n    bytes32 public immutable domainHash;\n\n    /**\n     * @notice Delegatable Constructor\n     * @param contractName string - The name of the contract\n     * @param version string - The version of the contract\n     */\n    constructor(string memory contractName, string memory version) {\n        domainHash = getEIP712DomainHash(\n            contractName,\n            version,\n            block.chainid,\n            address(this)\n        );\n    }\n\n    /* ===================================================================================== */\n    /* External Functions                                                                    */\n    /* ===================================================================================== */\n\n    /// @inheritdoc IDelegatable\n    function getDelegationTypedDataHash(Delegation memory delegation)\n        public\n        view\n        returns (bytes32)\n    {\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                \"\\x19\\x01\",\n                domainHash,\n                GET_DELEGATION_PACKETHASH(delegation)\n            )\n        );\n        return digest;\n    }\n\n    /// @inheritdoc IDelegatable\n    function getInvocationsTypedDataHash(Invocations memory invocations)\n        public\n        view\n        returns (bytes32)\n    {\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                \"\\x19\\x01\",\n                domainHash,\n                GET_INVOCATIONS_PACKETHASH(invocations)\n            )\n        );\n        return digest;\n    }\n\n    function getEIP712DomainHash(\n        string memory contractName,\n        string memory version,\n        uint256 chainId,\n        address verifyingContract\n    ) public pure returns (bytes32) {\n        bytes memory encoded = abi.encode(\n            EIP712DOMAIN_TYPEHASH,\n            keccak256(bytes(contractName)),\n            keccak256(bytes(version)),\n            chainId,\n            verifyingContract\n        );\n        return keccak256(encoded);\n    }\n\n    function verifyDelegationSignature(SignedDelegation memory signedDelegation)\n        public\n        view\n        virtual\n        override(IDelegatable, DelegatableCore)\n        returns (address)\n    {\n        Delegation memory delegation = signedDelegation.delegation;\n        bytes32 sigHash = getDelegationTypedDataHash(delegation);\n        address recoveredSignatureSigner = recover(\n            sigHash,\n            signedDelegation.signature\n        );\n        return recoveredSignatureSigner;\n    }\n\n    function verifyInvocationSignature(SignedInvocation memory signedInvocation)\n        public\n        view\n        returns (address)\n    {\n        bytes32 sigHash = getInvocationsTypedDataHash(\n            signedInvocation.invocations\n        );\n        address recoveredSignatureSigner = recover(\n            sigHash,\n            signedInvocation.signature\n        );\n        return recoveredSignatureSigner;\n    }\n\n    // --------------------------------------\n    // WRITES\n    // --------------------------------------\n\n    /// @inheritdoc IDelegatable\n    function contractInvoke(Invocation[] calldata batch)\n        external\n        override\n        returns (bool)\n    {\n        return _invoke(batch, msg.sender);\n    }\n\n    /// @inheritdoc IDelegatable\n    function invoke(SignedInvocation[] calldata signedInvocations)\n        external\n        virtual\n        override\n        returns (bool success)\n    {\n        for (uint256 i = 0; i < signedInvocations.length; i++) {\n            SignedInvocation calldata signedInvocation = signedInvocations[i];\n            address invocationSigner = verifyInvocationSignature(\n                signedInvocation\n            );\n            _enforceReplayProtection(\n                invocationSigner,\n                signedInvocations[i].invocations.replayProtection\n            );\n            success = _invoke(\n                signedInvocation.invocations.batch,\n                invocationSigner\n            );\n        }\n    }\n\n    /* ===================================================================================== */\n    /* Internal Functions                                                                    */\n    /* ===================================================================================== */\n}\n"
    },
    "contracts/DelegatableCore.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.15;\r\n\r\nimport {EIP712Decoder, EIP712DOMAIN_TYPEHASH} from \"@delegatable/delegatable-sol/contracts/TypesAndDecoders.sol\";\r\nimport {Delegation, Invocation, Invocations, SignedInvocation, SignedDelegation, Transaction, ReplayProtection, CaveatEnforcer} from \"@delegatable/delegatable-sol/contracts/CaveatEnforcer.sol\";\r\n\r\nabstract contract DelegatableCore is EIP712Decoder {\r\n    /// @notice Account delegation nonce manager\r\n    mapping(address => mapping(uint256 => uint256)) internal multiNonce;\r\n\r\n    function getNonce(address intendedSender, uint256 queue)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return multiNonce[intendedSender][queue];\r\n    }\r\n\r\n    function verifyDelegationSignature(SignedDelegation memory signedDelegation)\r\n        public\r\n        view\r\n        virtual\r\n        returns (address);\r\n\r\n    function _enforceReplayProtection(\r\n        address intendedSender,\r\n        ReplayProtection memory protection\r\n    ) internal {\r\n        uint256 queue = protection.queue;\r\n        uint256 nonce = protection.nonce;\r\n        require(\r\n            nonce == (multiNonce[intendedSender][queue] + 1),\r\n            \"DelegatableCore:nonce2-out-of-order\"\r\n        );\r\n        multiNonce[intendedSender][queue] = nonce;\r\n    }\r\n\r\n    function _execute(\r\n        address to,\r\n        bytes memory data,\r\n        uint256 gasLimit,\r\n        address sender\r\n    ) internal returns (bool success) {\r\n        bytes memory full = abi.encodePacked(data, sender);\r\n        bytes memory errorMessage;\r\n        (success, errorMessage) = address(to).call{gas: gasLimit}(full);\r\n\r\n        if (!success) {\r\n            if (errorMessage.length > 0) {\r\n                string memory reason = extractRevertReason(errorMessage);\r\n                revert(reason);\r\n            } else {\r\n                revert(\"DelegatableCore::execution-failed\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function extractRevertReason(bytes memory revertData)\r\n        internal\r\n        pure\r\n        returns (string memory reason)\r\n    {\r\n        uint256 l = revertData.length;\r\n        if (l < 68) return \"\";\r\n        uint256 t;\r\n        assembly {\r\n            revertData := add(revertData, 4)\r\n            t := mload(revertData) // Save the content of the length slot\r\n            mstore(revertData, sub(l, 4)) // Set proper length\r\n        }\r\n        reason = abi.decode(revertData, (string));\r\n        assembly {\r\n            mstore(revertData, t) // Restore the content of the length slot\r\n        }\r\n    }\r\n\r\n    function _invoke(Invocation[] calldata batch, address sender)\r\n        internal\r\n        returns (bool success)\r\n    {\r\n        for (uint256 x = 0; x < batch.length; x++) {\r\n            Invocation memory invocation = batch[x];\r\n            address intendedSender;\r\n            address canGrant;\r\n\r\n            // If there are no delegations, this invocation comes from the signer\r\n            if (invocation.authority.length == 0) {\r\n                intendedSender = sender;\r\n                canGrant = intendedSender;\r\n            }\r\n\r\n            bytes32 authHash = 0x0;\r\n\r\n            for (uint256 d = 0; d < invocation.authority.length; d++) {\r\n                SignedDelegation memory signedDelegation = invocation.authority[\r\n                    d\r\n                ];\r\n                address delegationSigner = verifyDelegationSignature(\r\n                    signedDelegation\r\n                );\r\n\r\n                // Implied sending account is the signer of the first delegation\r\n                if (d == 0) {\r\n                    intendedSender = delegationSigner;\r\n                    canGrant = intendedSender;\r\n                }\r\n\r\n                require(\r\n                    delegationSigner == canGrant,\r\n                    \"DelegatableCore:invalid-delegation-signer\"\r\n                );\r\n\r\n                Delegation memory delegation = signedDelegation.delegation;\r\n                require(\r\n                    delegation.authority == authHash,\r\n                    \"DelegatableCore:invalid-authority-delegation-link\"\r\n                );\r\n\r\n                // TODO: maybe delegations should have replay protection, at least a nonce (non order dependent),\r\n                // otherwise once it's revoked, you can't give the exact same permission again.\r\n                bytes32 delegationHash = GET_SIGNEDDELEGATION_PACKETHASH(\r\n                    signedDelegation\r\n                );\r\n\r\n                // Each delegation can include any number of caveats.\r\n                // A caveat is any condition that may reject a proposed transaction.\r\n                // The caveats specify an external contract that is passed the proposed tx,\r\n                // As well as some extra terms that are used to parameterize the enforcer.\r\n                for (uint16 y = 0; y < delegation.caveats.length; y++) {\r\n                    CaveatEnforcer enforcer = CaveatEnforcer(\r\n                        delegation.caveats[y].enforcer\r\n                    );\r\n                    bool caveatSuccess = enforcer.enforceCaveat(\r\n                        delegation.caveats[y].terms,\r\n                        invocation.transaction,\r\n                        delegationHash\r\n                    );\r\n                    require(caveatSuccess, \"DelegatableCore:caveat-rejected\");\r\n                }\r\n\r\n                // Store the hash of this delegation in `authHash`\r\n                // That way the next delegation can be verified against it.\r\n                authHash = delegationHash;\r\n                canGrant = delegation.delegate;\r\n            }\r\n\r\n            // Verify the delegate at the end of the delegation chain is the signer\r\n            require(canGrant == sender, \"DelegatableCore:invalid-delegate\");\r\n\r\n            // Here we perform the requested invocation.\r\n            Transaction memory transaction = invocation.transaction;\r\n\r\n            require(\r\n                transaction.to == address(this),\r\n                \"DelegatableCore:invalid-invocation-target\"\r\n            );\r\n\r\n            success = _execute(\r\n                transaction.to,\r\n                transaction.data,\r\n                transaction.gasLimit,\r\n                intendedSender\r\n            );\r\n            require(success, \"DelegatableCore::execution-failed\");\r\n        }\r\n    }\r\n\r\n    function _msgSender() internal view virtual returns (address sender) {\r\n        if (msg.sender == address(this)) {\r\n            bytes memory array = msg.data;\r\n            uint256 index = msg.data.length;\r\n            assembly {\r\n                sender := and(\r\n                    mload(add(array, index)),\r\n                    0xffffffffffffffffffffffffffffffffffffffff\r\n                )\r\n            }\r\n        } else {\r\n            sender = msg.sender;\r\n        }\r\n        return sender;\r\n    }\r\n}"
    },
    "contracts/ERC20Manager.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport { Delegatable } from \"./Delegatable.sol\";\nimport { DelegatableCore } from \"./DelegatableCore.sol\";\nimport \"@delegatable/delegatable-sol/contracts/TypesAndDecoders.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @title ERC20Manager\n * @author McOso\n * @notice Manages the erc20 delegation\n */\ncontract ERC20Manager is Delegatable, Ownable {\n  /* ===================================================================================== */\n  /* Constructor & Modifiers                                                               */\n  /* ===================================================================================== */\n\n  mapping(bytes32 => bool) revokedMap;\n\n  constructor() Delegatable(\"ERC20Manager\", \"1\") {}\n\n  /* ===================================================================================== */\n  /* External Functions                                                                    */\n  /* ===================================================================================== */\n\n  // ========================\n  // READS\n  // ========================\n  function verifyExternalDelegationSignature(SignedDelegation memory _signedDelegation, bytes32 _domainHash) public view virtual returns (address signer) {\n      Delegation memory delegation_ = _signedDelegation.delegation;\n      bytes32 sigHash_ = getExternalDelegationTypedDataHash(delegation_, _domainHash);\n      return recover(sigHash_, _signedDelegation.signature);\n  }\n\n  function getExternalDelegationTypedDataHash(Delegation memory _delegation, bytes32 _domainHash) public pure returns (bytes32 sigHash) {\n      return keccak256(\n          abi.encodePacked(\n              \"\\x19\\x01\",\n              _domainHash,\n              GET_DELEGATION_PACKETHASH(_delegation)\n          )\n      );\n  }\n\n  function isRevoked(SignedDelegation memory _signedDelegation) public view returns (bool revoked) {\n    bytes32 delegationHash_ = GET_SIGNEDDELEGATION_PACKETHASH(_signedDelegation);\n    return revokedMap[delegationHash_];\n  }\n\n  // ========================\n  // WRITES\n  // ========================\n  function approveTransferProxy(\n    address _token,\n    address _from,\n    uint256 _amount,\n    uint256 _deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external {\n    require(msg.sender == address(this), \"ERC20Manager:invalid-sender\");\n    IERC20Permit(_token).permit(_from, address(this), _amount, _deadline, v, r, s);\n  }\n\n  function transferProxy(\n    address _token,\n    address _to,\n    uint256 _amount\n  ) external returns (bool) {\n    require(msg.sender == address(this), \"ERC20Manager:transferProxy-not-authorized\");\n    return IERC20(_token).transferFrom(_msgSender(), _to, _amount);\n  }\n\n  function revoke(SignedDelegation calldata _signedDelegation) external {\n    address signer_ = verifyExternalDelegationSignature(_signedDelegation, domainHash);\n    require(msg.sender == signer_, \"ERC20Manager:unauthorized-revoke\");\n\n    bytes32 delegationHash_ = GET_SIGNEDDELEGATION_PACKETHASH(_signedDelegation);\n    revokedMap[delegationHash_] = true;\n  }\n\n  function invoke(SignedInvocation[] calldata signedInvocations)\n    external\n    override\n    returns (bool success)\n  {\n      for (uint256 i = 0; i < signedInvocations.length; i++) {\n          SignedInvocation calldata signedInvocation = signedInvocations[i];\n\n          for (uint256 j = 0; j < signedInvocation.invocations.batch.length; j++){\n            Invocation memory invocation = signedInvocation.invocations.batch[j];\n            for (uint256 k = 0; k < invocation.authority.length; k++){\n              require(!isRevoked(invocation.authority[k]), \"ERC20Manager:revoked-delegation\");\n            }\n          }\n          \n          address invocationSigner = verifyInvocationSignature(\n              signedInvocation\n          );\n          _enforceReplayProtection(\n              invocationSigner,\n              signedInvocations[i].invocations.replayProtection\n          );\n          success = _invoke(\n              signedInvocation.invocations.batch,\n              invocationSigner\n          );\n      }\n  }\n\n  /* ===================================================================================== */\n  /* Internal Functions                                                                    */\n  /* ===================================================================================== */\n  function _msgSender()\n    internal\n    view\n    virtual\n    override(DelegatableCore, Context)\n    returns (address sender)\n  {\n    if (msg.sender == address(this)) {\n      bytes memory array = msg.data;\n      uint256 index = msg.data.length;\n      assembly {\n        sender := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n      }\n    } else {\n      sender = msg.sender;\n    }\n    return sender;\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "istanbul",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}